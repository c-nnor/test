
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Note
 * 
 */
export type Note = $Result.DefaultSelection<Prisma.$NotePayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model TravelPathReport
 * 
 */
export type TravelPathReport = $Result.DefaultSelection<Prisma.$TravelPathReportPayload>
/**
 * Model LocationCheck
 * 
 */
export type LocationCheck = $Result.DefaultSelection<Prisma.$LocationCheckPayload>
/**
 * Model CheckItem
 * 
 */
export type CheckItem = $Result.DefaultSelection<Prisma.$CheckItemPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  USER: 'USER',
  ADMIN: 'ADMIN'
};

export type Role = (typeof Role)[keyof typeof Role]


export const Store: {
  SPRUCEFIELD: 'SPRUCEFIELD',
  MCKINSTRY: 'MCKINSTRY',
  BANBRIDGE: 'BANBRIDGE',
  NEWRY: 'NEWRY',
  PORTADOWN: 'PORTADOWN',
  LURGAN: 'LURGAN'
};

export type Store = (typeof Store)[keyof typeof Store]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type Store = $Enums.Store

export const Store: typeof $Enums.Store

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Notes
 * const notes = await prisma.note.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Notes
   * const notes = await prisma.note.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs, $Utils.Call<Prisma.TypeMapCb, {
    extArgs: ExtArgs
  }>, ClientOptions>

      /**
   * `prisma.note`: Exposes CRUD operations for the **Note** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notes
    * const notes = await prisma.note.findMany()
    * ```
    */
  get note(): Prisma.NoteDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.travelPathReport`: Exposes CRUD operations for the **TravelPathReport** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TravelPathReports
    * const travelPathReports = await prisma.travelPathReport.findMany()
    * ```
    */
  get travelPathReport(): Prisma.TravelPathReportDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.locationCheck`: Exposes CRUD operations for the **LocationCheck** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LocationChecks
    * const locationChecks = await prisma.locationCheck.findMany()
    * ```
    */
  get locationCheck(): Prisma.LocationCheckDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.checkItem`: Exposes CRUD operations for the **CheckItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CheckItems
    * const checkItems = await prisma.checkItem.findMany()
    * ```
    */
  get checkItem(): Prisma.CheckItemDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.4.1
   * Query Engine version: a9055b89e58b4b5bfb59600785423b1db3d0e75d
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Note: 'Note',
    User: 'User',
    TravelPathReport: 'TravelPathReport',
    LocationCheck: 'LocationCheck',
    CheckItem: 'CheckItem'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "note" | "user" | "travelPathReport" | "locationCheck" | "checkItem"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Note: {
        payload: Prisma.$NotePayload<ExtArgs>
        fields: Prisma.NoteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NoteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NoteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>
          }
          findFirst: {
            args: Prisma.NoteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NoteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>
          }
          findMany: {
            args: Prisma.NoteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>[]
          }
          create: {
            args: Prisma.NoteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>
          }
          createMany: {
            args: Prisma.NoteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NoteCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>[]
          }
          delete: {
            args: Prisma.NoteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>
          }
          update: {
            args: Prisma.NoteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>
          }
          deleteMany: {
            args: Prisma.NoteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NoteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.NoteUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>[]
          }
          upsert: {
            args: Prisma.NoteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>
          }
          aggregate: {
            args: Prisma.NoteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNote>
          }
          groupBy: {
            args: Prisma.NoteGroupByArgs<ExtArgs>
            result: $Utils.Optional<NoteGroupByOutputType>[]
          }
          count: {
            args: Prisma.NoteCountArgs<ExtArgs>
            result: $Utils.Optional<NoteCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      TravelPathReport: {
        payload: Prisma.$TravelPathReportPayload<ExtArgs>
        fields: Prisma.TravelPathReportFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TravelPathReportFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TravelPathReportPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TravelPathReportFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TravelPathReportPayload>
          }
          findFirst: {
            args: Prisma.TravelPathReportFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TravelPathReportPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TravelPathReportFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TravelPathReportPayload>
          }
          findMany: {
            args: Prisma.TravelPathReportFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TravelPathReportPayload>[]
          }
          create: {
            args: Prisma.TravelPathReportCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TravelPathReportPayload>
          }
          createMany: {
            args: Prisma.TravelPathReportCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TravelPathReportCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TravelPathReportPayload>[]
          }
          delete: {
            args: Prisma.TravelPathReportDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TravelPathReportPayload>
          }
          update: {
            args: Prisma.TravelPathReportUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TravelPathReportPayload>
          }
          deleteMany: {
            args: Prisma.TravelPathReportDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TravelPathReportUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TravelPathReportUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TravelPathReportPayload>[]
          }
          upsert: {
            args: Prisma.TravelPathReportUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TravelPathReportPayload>
          }
          aggregate: {
            args: Prisma.TravelPathReportAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTravelPathReport>
          }
          groupBy: {
            args: Prisma.TravelPathReportGroupByArgs<ExtArgs>
            result: $Utils.Optional<TravelPathReportGroupByOutputType>[]
          }
          count: {
            args: Prisma.TravelPathReportCountArgs<ExtArgs>
            result: $Utils.Optional<TravelPathReportCountAggregateOutputType> | number
          }
        }
      }
      LocationCheck: {
        payload: Prisma.$LocationCheckPayload<ExtArgs>
        fields: Prisma.LocationCheckFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LocationCheckFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationCheckPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LocationCheckFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationCheckPayload>
          }
          findFirst: {
            args: Prisma.LocationCheckFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationCheckPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LocationCheckFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationCheckPayload>
          }
          findMany: {
            args: Prisma.LocationCheckFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationCheckPayload>[]
          }
          create: {
            args: Prisma.LocationCheckCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationCheckPayload>
          }
          createMany: {
            args: Prisma.LocationCheckCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LocationCheckCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationCheckPayload>[]
          }
          delete: {
            args: Prisma.LocationCheckDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationCheckPayload>
          }
          update: {
            args: Prisma.LocationCheckUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationCheckPayload>
          }
          deleteMany: {
            args: Prisma.LocationCheckDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LocationCheckUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LocationCheckUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationCheckPayload>[]
          }
          upsert: {
            args: Prisma.LocationCheckUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationCheckPayload>
          }
          aggregate: {
            args: Prisma.LocationCheckAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLocationCheck>
          }
          groupBy: {
            args: Prisma.LocationCheckGroupByArgs<ExtArgs>
            result: $Utils.Optional<LocationCheckGroupByOutputType>[]
          }
          count: {
            args: Prisma.LocationCheckCountArgs<ExtArgs>
            result: $Utils.Optional<LocationCheckCountAggregateOutputType> | number
          }
        }
      }
      CheckItem: {
        payload: Prisma.$CheckItemPayload<ExtArgs>
        fields: Prisma.CheckItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CheckItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CheckItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CheckItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CheckItemPayload>
          }
          findFirst: {
            args: Prisma.CheckItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CheckItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CheckItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CheckItemPayload>
          }
          findMany: {
            args: Prisma.CheckItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CheckItemPayload>[]
          }
          create: {
            args: Prisma.CheckItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CheckItemPayload>
          }
          createMany: {
            args: Prisma.CheckItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CheckItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CheckItemPayload>[]
          }
          delete: {
            args: Prisma.CheckItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CheckItemPayload>
          }
          update: {
            args: Prisma.CheckItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CheckItemPayload>
          }
          deleteMany: {
            args: Prisma.CheckItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CheckItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CheckItemUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CheckItemPayload>[]
          }
          upsert: {
            args: Prisma.CheckItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CheckItemPayload>
          }
          aggregate: {
            args: Prisma.CheckItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCheckItem>
          }
          groupBy: {
            args: Prisma.CheckItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<CheckItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.CheckItemCountArgs<ExtArgs>
            result: $Utils.Optional<CheckItemCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    note?: NoteOmit
    user?: UserOmit
    travelPathReport?: TravelPathReportOmit
    locationCheck?: LocationCheckOmit
    checkItem?: CheckItemOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    travelPathReports: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    travelPathReports?: boolean | UserCountOutputTypeCountTravelPathReportsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTravelPathReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TravelPathReportWhereInput
  }


  /**
   * Count Type TravelPathReportCountOutputType
   */

  export type TravelPathReportCountOutputType = {
    locations: number
  }

  export type TravelPathReportCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    locations?: boolean | TravelPathReportCountOutputTypeCountLocationsArgs
  }

  // Custom InputTypes
  /**
   * TravelPathReportCountOutputType without action
   */
  export type TravelPathReportCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TravelPathReportCountOutputType
     */
    select?: TravelPathReportCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TravelPathReportCountOutputType without action
   */
  export type TravelPathReportCountOutputTypeCountLocationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LocationCheckWhereInput
  }


  /**
   * Count Type LocationCheckCountOutputType
   */

  export type LocationCheckCountOutputType = {
    checkItems: number
  }

  export type LocationCheckCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    checkItems?: boolean | LocationCheckCountOutputTypeCountCheckItemsArgs
  }

  // Custom InputTypes
  /**
   * LocationCheckCountOutputType without action
   */
  export type LocationCheckCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationCheckCountOutputType
     */
    select?: LocationCheckCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LocationCheckCountOutputType without action
   */
  export type LocationCheckCountOutputTypeCountCheckItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CheckItemWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Note
   */

  export type AggregateNote = {
    _count: NoteCountAggregateOutputType | null
    _min: NoteMinAggregateOutputType | null
    _max: NoteMaxAggregateOutputType | null
  }

  export type NoteMinAggregateOutputType = {
    id: string | null
    title: string | null
    content: string | null
    createdAt: Date | null
  }

  export type NoteMaxAggregateOutputType = {
    id: string | null
    title: string | null
    content: string | null
    createdAt: Date | null
  }

  export type NoteCountAggregateOutputType = {
    id: number
    title: number
    content: number
    createdAt: number
    _all: number
  }


  export type NoteMinAggregateInputType = {
    id?: true
    title?: true
    content?: true
    createdAt?: true
  }

  export type NoteMaxAggregateInputType = {
    id?: true
    title?: true
    content?: true
    createdAt?: true
  }

  export type NoteCountAggregateInputType = {
    id?: true
    title?: true
    content?: true
    createdAt?: true
    _all?: true
  }

  export type NoteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Note to aggregate.
     */
    where?: NoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notes to fetch.
     */
    orderBy?: NoteOrderByWithRelationInput | NoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notes
    **/
    _count?: true | NoteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NoteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NoteMaxAggregateInputType
  }

  export type GetNoteAggregateType<T extends NoteAggregateArgs> = {
        [P in keyof T & keyof AggregateNote]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNote[P]>
      : GetScalarType<T[P], AggregateNote[P]>
  }




  export type NoteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NoteWhereInput
    orderBy?: NoteOrderByWithAggregationInput | NoteOrderByWithAggregationInput[]
    by: NoteScalarFieldEnum[] | NoteScalarFieldEnum
    having?: NoteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NoteCountAggregateInputType | true
    _min?: NoteMinAggregateInputType
    _max?: NoteMaxAggregateInputType
  }

  export type NoteGroupByOutputType = {
    id: string
    title: string
    content: string
    createdAt: Date
    _count: NoteCountAggregateOutputType | null
    _min: NoteMinAggregateOutputType | null
    _max: NoteMaxAggregateOutputType | null
  }

  type GetNoteGroupByPayload<T extends NoteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NoteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NoteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NoteGroupByOutputType[P]>
            : GetScalarType<T[P], NoteGroupByOutputType[P]>
        }
      >
    >


  export type NoteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    content?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["note"]>

  export type NoteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    content?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["note"]>

  export type NoteSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    content?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["note"]>

  export type NoteSelectScalar = {
    id?: boolean
    title?: boolean
    content?: boolean
    createdAt?: boolean
  }

  export type NoteOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "content" | "createdAt", ExtArgs["result"]["note"]>

  export type $NotePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Note"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      content: string
      createdAt: Date
    }, ExtArgs["result"]["note"]>
    composites: {}
  }

  type NoteGetPayload<S extends boolean | null | undefined | NoteDefaultArgs> = $Result.GetResult<Prisma.$NotePayload, S>

  type NoteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NoteFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NoteCountAggregateInputType | true
    }

  export interface NoteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Note'], meta: { name: 'Note' } }
    /**
     * Find zero or one Note that matches the filter.
     * @param {NoteFindUniqueArgs} args - Arguments to find a Note
     * @example
     * // Get one Note
     * const note = await prisma.note.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NoteFindUniqueArgs>(args: SelectSubset<T, NoteFindUniqueArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Note that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NoteFindUniqueOrThrowArgs} args - Arguments to find a Note
     * @example
     * // Get one Note
     * const note = await prisma.note.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NoteFindUniqueOrThrowArgs>(args: SelectSubset<T, NoteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Note that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteFindFirstArgs} args - Arguments to find a Note
     * @example
     * // Get one Note
     * const note = await prisma.note.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NoteFindFirstArgs>(args?: SelectSubset<T, NoteFindFirstArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Note that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteFindFirstOrThrowArgs} args - Arguments to find a Note
     * @example
     * // Get one Note
     * const note = await prisma.note.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NoteFindFirstOrThrowArgs>(args?: SelectSubset<T, NoteFindFirstOrThrowArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Notes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notes
     * const notes = await prisma.note.findMany()
     * 
     * // Get first 10 Notes
     * const notes = await prisma.note.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const noteWithIdOnly = await prisma.note.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NoteFindManyArgs>(args?: SelectSubset<T, NoteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Note.
     * @param {NoteCreateArgs} args - Arguments to create a Note.
     * @example
     * // Create one Note
     * const Note = await prisma.note.create({
     *   data: {
     *     // ... data to create a Note
     *   }
     * })
     * 
     */
    create<T extends NoteCreateArgs>(args: SelectSubset<T, NoteCreateArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Notes.
     * @param {NoteCreateManyArgs} args - Arguments to create many Notes.
     * @example
     * // Create many Notes
     * const note = await prisma.note.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NoteCreateManyArgs>(args?: SelectSubset<T, NoteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Notes and returns the data saved in the database.
     * @param {NoteCreateManyAndReturnArgs} args - Arguments to create many Notes.
     * @example
     * // Create many Notes
     * const note = await prisma.note.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Notes and only return the `id`
     * const noteWithIdOnly = await prisma.note.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NoteCreateManyAndReturnArgs>(args?: SelectSubset<T, NoteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Note.
     * @param {NoteDeleteArgs} args - Arguments to delete one Note.
     * @example
     * // Delete one Note
     * const Note = await prisma.note.delete({
     *   where: {
     *     // ... filter to delete one Note
     *   }
     * })
     * 
     */
    delete<T extends NoteDeleteArgs>(args: SelectSubset<T, NoteDeleteArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Note.
     * @param {NoteUpdateArgs} args - Arguments to update one Note.
     * @example
     * // Update one Note
     * const note = await prisma.note.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NoteUpdateArgs>(args: SelectSubset<T, NoteUpdateArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Notes.
     * @param {NoteDeleteManyArgs} args - Arguments to filter Notes to delete.
     * @example
     * // Delete a few Notes
     * const { count } = await prisma.note.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NoteDeleteManyArgs>(args?: SelectSubset<T, NoteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notes
     * const note = await prisma.note.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NoteUpdateManyArgs>(args: SelectSubset<T, NoteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notes and returns the data updated in the database.
     * @param {NoteUpdateManyAndReturnArgs} args - Arguments to update many Notes.
     * @example
     * // Update many Notes
     * const note = await prisma.note.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Notes and only return the `id`
     * const noteWithIdOnly = await prisma.note.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends NoteUpdateManyAndReturnArgs>(args: SelectSubset<T, NoteUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Note.
     * @param {NoteUpsertArgs} args - Arguments to update or create a Note.
     * @example
     * // Update or create a Note
     * const note = await prisma.note.upsert({
     *   create: {
     *     // ... data to create a Note
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Note we want to update
     *   }
     * })
     */
    upsert<T extends NoteUpsertArgs>(args: SelectSubset<T, NoteUpsertArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Notes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteCountArgs} args - Arguments to filter Notes to count.
     * @example
     * // Count the number of Notes
     * const count = await prisma.note.count({
     *   where: {
     *     // ... the filter for the Notes we want to count
     *   }
     * })
    **/
    count<T extends NoteCountArgs>(
      args?: Subset<T, NoteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NoteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Note.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NoteAggregateArgs>(args: Subset<T, NoteAggregateArgs>): Prisma.PrismaPromise<GetNoteAggregateType<T>>

    /**
     * Group by Note.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NoteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NoteGroupByArgs['orderBy'] }
        : { orderBy?: NoteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NoteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNoteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Note model
   */
  readonly fields: NoteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Note.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NoteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Note model
   */ 
  interface NoteFieldRefs {
    readonly id: FieldRef<"Note", 'String'>
    readonly title: FieldRef<"Note", 'String'>
    readonly content: FieldRef<"Note", 'String'>
    readonly createdAt: FieldRef<"Note", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Note findUnique
   */
  export type NoteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Note
     */
    omit?: NoteOmit<ExtArgs> | null
    /**
     * Filter, which Note to fetch.
     */
    where: NoteWhereUniqueInput
  }

  /**
   * Note findUniqueOrThrow
   */
  export type NoteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Note
     */
    omit?: NoteOmit<ExtArgs> | null
    /**
     * Filter, which Note to fetch.
     */
    where: NoteWhereUniqueInput
  }

  /**
   * Note findFirst
   */
  export type NoteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Note
     */
    omit?: NoteOmit<ExtArgs> | null
    /**
     * Filter, which Note to fetch.
     */
    where?: NoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notes to fetch.
     */
    orderBy?: NoteOrderByWithRelationInput | NoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notes.
     */
    cursor?: NoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notes.
     */
    distinct?: NoteScalarFieldEnum | NoteScalarFieldEnum[]
  }

  /**
   * Note findFirstOrThrow
   */
  export type NoteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Note
     */
    omit?: NoteOmit<ExtArgs> | null
    /**
     * Filter, which Note to fetch.
     */
    where?: NoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notes to fetch.
     */
    orderBy?: NoteOrderByWithRelationInput | NoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notes.
     */
    cursor?: NoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notes.
     */
    distinct?: NoteScalarFieldEnum | NoteScalarFieldEnum[]
  }

  /**
   * Note findMany
   */
  export type NoteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Note
     */
    omit?: NoteOmit<ExtArgs> | null
    /**
     * Filter, which Notes to fetch.
     */
    where?: NoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notes to fetch.
     */
    orderBy?: NoteOrderByWithRelationInput | NoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notes.
     */
    cursor?: NoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notes.
     */
    skip?: number
    distinct?: NoteScalarFieldEnum | NoteScalarFieldEnum[]
  }

  /**
   * Note create
   */
  export type NoteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Note
     */
    omit?: NoteOmit<ExtArgs> | null
    /**
     * The data needed to create a Note.
     */
    data: XOR<NoteCreateInput, NoteUncheckedCreateInput>
  }

  /**
   * Note createMany
   */
  export type NoteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notes.
     */
    data: NoteCreateManyInput | NoteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Note createManyAndReturn
   */
  export type NoteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Note
     */
    omit?: NoteOmit<ExtArgs> | null
    /**
     * The data used to create many Notes.
     */
    data: NoteCreateManyInput | NoteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Note update
   */
  export type NoteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Note
     */
    omit?: NoteOmit<ExtArgs> | null
    /**
     * The data needed to update a Note.
     */
    data: XOR<NoteUpdateInput, NoteUncheckedUpdateInput>
    /**
     * Choose, which Note to update.
     */
    where: NoteWhereUniqueInput
  }

  /**
   * Note updateMany
   */
  export type NoteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notes.
     */
    data: XOR<NoteUpdateManyMutationInput, NoteUncheckedUpdateManyInput>
    /**
     * Filter which Notes to update
     */
    where?: NoteWhereInput
    /**
     * Limit how many Notes to update.
     */
    limit?: number
  }

  /**
   * Note updateManyAndReturn
   */
  export type NoteUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Note
     */
    omit?: NoteOmit<ExtArgs> | null
    /**
     * The data used to update Notes.
     */
    data: XOR<NoteUpdateManyMutationInput, NoteUncheckedUpdateManyInput>
    /**
     * Filter which Notes to update
     */
    where?: NoteWhereInput
    /**
     * Limit how many Notes to update.
     */
    limit?: number
  }

  /**
   * Note upsert
   */
  export type NoteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Note
     */
    omit?: NoteOmit<ExtArgs> | null
    /**
     * The filter to search for the Note to update in case it exists.
     */
    where: NoteWhereUniqueInput
    /**
     * In case the Note found by the `where` argument doesn't exist, create a new Note with this data.
     */
    create: XOR<NoteCreateInput, NoteUncheckedCreateInput>
    /**
     * In case the Note was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NoteUpdateInput, NoteUncheckedUpdateInput>
  }

  /**
   * Note delete
   */
  export type NoteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Note
     */
    omit?: NoteOmit<ExtArgs> | null
    /**
     * Filter which Note to delete.
     */
    where: NoteWhereUniqueInput
  }

  /**
   * Note deleteMany
   */
  export type NoteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notes to delete
     */
    where?: NoteWhereInput
    /**
     * Limit how many Notes to delete.
     */
    limit?: number
  }

  /**
   * Note without action
   */
  export type NoteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Note
     */
    omit?: NoteOmit<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    name: string | null
    password: string | null
    store: $Enums.Store | null
    isVerified: boolean | null
    role: $Enums.Role | null
    verificationToken: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    name: string | null
    password: string | null
    store: $Enums.Store | null
    isVerified: boolean | null
    role: $Enums.Role | null
    verificationToken: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    name: number
    password: number
    store: number
    isVerified: number
    role: number
    verificationToken: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    store?: true
    isVerified?: true
    role?: true
    verificationToken?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    store?: true
    isVerified?: true
    role?: true
    verificationToken?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    store?: true
    isVerified?: true
    role?: true
    verificationToken?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    email: string
    name: string
    password: string
    store: $Enums.Store
    isVerified: boolean
    role: $Enums.Role
    verificationToken: string | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    store?: boolean
    isVerified?: boolean
    role?: boolean
    verificationToken?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    travelPathReports?: boolean | User$travelPathReportsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    store?: boolean
    isVerified?: boolean
    role?: boolean
    verificationToken?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    store?: boolean
    isVerified?: boolean
    role?: boolean
    verificationToken?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    store?: boolean
    isVerified?: boolean
    role?: boolean
    verificationToken?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "name" | "password" | "store" | "isVerified" | "role" | "verificationToken" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    travelPathReports?: boolean | User$travelPathReportsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      travelPathReports: Prisma.$TravelPathReportPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      name: string
      password: string
      store: $Enums.Store
      isVerified: boolean
      role: $Enums.Role
      verificationToken: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    travelPathReports<T extends User$travelPathReportsArgs<ExtArgs> = {}>(args?: Subset<T, User$travelPathReportsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TravelPathReportPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly email: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly store: FieldRef<"User", 'Store'>
    readonly isVerified: FieldRef<"User", 'Boolean'>
    readonly role: FieldRef<"User", 'Role'>
    readonly verificationToken: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.travelPathReports
   */
  export type User$travelPathReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TravelPathReport
     */
    select?: TravelPathReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TravelPathReport
     */
    omit?: TravelPathReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TravelPathReportInclude<ExtArgs> | null
    where?: TravelPathReportWhereInput
    orderBy?: TravelPathReportOrderByWithRelationInput | TravelPathReportOrderByWithRelationInput[]
    cursor?: TravelPathReportWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TravelPathReportScalarFieldEnum | TravelPathReportScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model TravelPathReport
   */

  export type AggregateTravelPathReport = {
    _count: TravelPathReportCountAggregateOutputType | null
    _avg: TravelPathReportAvgAggregateOutputType | null
    _sum: TravelPathReportSumAggregateOutputType | null
    _min: TravelPathReportMinAggregateOutputType | null
    _max: TravelPathReportMaxAggregateOutputType | null
  }

  export type TravelPathReportAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type TravelPathReportSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type TravelPathReportMinAggregateOutputType = {
    id: number | null
    userId: number | null
    startTime: Date | null
    endTime: Date | null
    duration: string | null
    createdAt: Date | null
  }

  export type TravelPathReportMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    startTime: Date | null
    endTime: Date | null
    duration: string | null
    createdAt: Date | null
  }

  export type TravelPathReportCountAggregateOutputType = {
    id: number
    userId: number
    startTime: number
    endTime: number
    duration: number
    createdAt: number
    _all: number
  }


  export type TravelPathReportAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type TravelPathReportSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type TravelPathReportMinAggregateInputType = {
    id?: true
    userId?: true
    startTime?: true
    endTime?: true
    duration?: true
    createdAt?: true
  }

  export type TravelPathReportMaxAggregateInputType = {
    id?: true
    userId?: true
    startTime?: true
    endTime?: true
    duration?: true
    createdAt?: true
  }

  export type TravelPathReportCountAggregateInputType = {
    id?: true
    userId?: true
    startTime?: true
    endTime?: true
    duration?: true
    createdAt?: true
    _all?: true
  }

  export type TravelPathReportAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TravelPathReport to aggregate.
     */
    where?: TravelPathReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TravelPathReports to fetch.
     */
    orderBy?: TravelPathReportOrderByWithRelationInput | TravelPathReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TravelPathReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TravelPathReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TravelPathReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TravelPathReports
    **/
    _count?: true | TravelPathReportCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TravelPathReportAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TravelPathReportSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TravelPathReportMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TravelPathReportMaxAggregateInputType
  }

  export type GetTravelPathReportAggregateType<T extends TravelPathReportAggregateArgs> = {
        [P in keyof T & keyof AggregateTravelPathReport]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTravelPathReport[P]>
      : GetScalarType<T[P], AggregateTravelPathReport[P]>
  }




  export type TravelPathReportGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TravelPathReportWhereInput
    orderBy?: TravelPathReportOrderByWithAggregationInput | TravelPathReportOrderByWithAggregationInput[]
    by: TravelPathReportScalarFieldEnum[] | TravelPathReportScalarFieldEnum
    having?: TravelPathReportScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TravelPathReportCountAggregateInputType | true
    _avg?: TravelPathReportAvgAggregateInputType
    _sum?: TravelPathReportSumAggregateInputType
    _min?: TravelPathReportMinAggregateInputType
    _max?: TravelPathReportMaxAggregateInputType
  }

  export type TravelPathReportGroupByOutputType = {
    id: number
    userId: number
    startTime: Date
    endTime: Date
    duration: string
    createdAt: Date
    _count: TravelPathReportCountAggregateOutputType | null
    _avg: TravelPathReportAvgAggregateOutputType | null
    _sum: TravelPathReportSumAggregateOutputType | null
    _min: TravelPathReportMinAggregateOutputType | null
    _max: TravelPathReportMaxAggregateOutputType | null
  }

  type GetTravelPathReportGroupByPayload<T extends TravelPathReportGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TravelPathReportGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TravelPathReportGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TravelPathReportGroupByOutputType[P]>
            : GetScalarType<T[P], TravelPathReportGroupByOutputType[P]>
        }
      >
    >


  export type TravelPathReportSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    startTime?: boolean
    endTime?: boolean
    duration?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    locations?: boolean | TravelPathReport$locationsArgs<ExtArgs>
    _count?: boolean | TravelPathReportCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["travelPathReport"]>

  export type TravelPathReportSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    startTime?: boolean
    endTime?: boolean
    duration?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["travelPathReport"]>

  export type TravelPathReportSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    startTime?: boolean
    endTime?: boolean
    duration?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["travelPathReport"]>

  export type TravelPathReportSelectScalar = {
    id?: boolean
    userId?: boolean
    startTime?: boolean
    endTime?: boolean
    duration?: boolean
    createdAt?: boolean
  }

  export type TravelPathReportOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "startTime" | "endTime" | "duration" | "createdAt", ExtArgs["result"]["travelPathReport"]>
  export type TravelPathReportInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    locations?: boolean | TravelPathReport$locationsArgs<ExtArgs>
    _count?: boolean | TravelPathReportCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TravelPathReportIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type TravelPathReportIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $TravelPathReportPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TravelPathReport"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      locations: Prisma.$LocationCheckPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      startTime: Date
      endTime: Date
      duration: string
      createdAt: Date
    }, ExtArgs["result"]["travelPathReport"]>
    composites: {}
  }

  type TravelPathReportGetPayload<S extends boolean | null | undefined | TravelPathReportDefaultArgs> = $Result.GetResult<Prisma.$TravelPathReportPayload, S>

  type TravelPathReportCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TravelPathReportFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TravelPathReportCountAggregateInputType | true
    }

  export interface TravelPathReportDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TravelPathReport'], meta: { name: 'TravelPathReport' } }
    /**
     * Find zero or one TravelPathReport that matches the filter.
     * @param {TravelPathReportFindUniqueArgs} args - Arguments to find a TravelPathReport
     * @example
     * // Get one TravelPathReport
     * const travelPathReport = await prisma.travelPathReport.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TravelPathReportFindUniqueArgs>(args: SelectSubset<T, TravelPathReportFindUniqueArgs<ExtArgs>>): Prisma__TravelPathReportClient<$Result.GetResult<Prisma.$TravelPathReportPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one TravelPathReport that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TravelPathReportFindUniqueOrThrowArgs} args - Arguments to find a TravelPathReport
     * @example
     * // Get one TravelPathReport
     * const travelPathReport = await prisma.travelPathReport.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TravelPathReportFindUniqueOrThrowArgs>(args: SelectSubset<T, TravelPathReportFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TravelPathReportClient<$Result.GetResult<Prisma.$TravelPathReportPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first TravelPathReport that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TravelPathReportFindFirstArgs} args - Arguments to find a TravelPathReport
     * @example
     * // Get one TravelPathReport
     * const travelPathReport = await prisma.travelPathReport.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TravelPathReportFindFirstArgs>(args?: SelectSubset<T, TravelPathReportFindFirstArgs<ExtArgs>>): Prisma__TravelPathReportClient<$Result.GetResult<Prisma.$TravelPathReportPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first TravelPathReport that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TravelPathReportFindFirstOrThrowArgs} args - Arguments to find a TravelPathReport
     * @example
     * // Get one TravelPathReport
     * const travelPathReport = await prisma.travelPathReport.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TravelPathReportFindFirstOrThrowArgs>(args?: SelectSubset<T, TravelPathReportFindFirstOrThrowArgs<ExtArgs>>): Prisma__TravelPathReportClient<$Result.GetResult<Prisma.$TravelPathReportPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more TravelPathReports that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TravelPathReportFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TravelPathReports
     * const travelPathReports = await prisma.travelPathReport.findMany()
     * 
     * // Get first 10 TravelPathReports
     * const travelPathReports = await prisma.travelPathReport.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const travelPathReportWithIdOnly = await prisma.travelPathReport.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TravelPathReportFindManyArgs>(args?: SelectSubset<T, TravelPathReportFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TravelPathReportPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a TravelPathReport.
     * @param {TravelPathReportCreateArgs} args - Arguments to create a TravelPathReport.
     * @example
     * // Create one TravelPathReport
     * const TravelPathReport = await prisma.travelPathReport.create({
     *   data: {
     *     // ... data to create a TravelPathReport
     *   }
     * })
     * 
     */
    create<T extends TravelPathReportCreateArgs>(args: SelectSubset<T, TravelPathReportCreateArgs<ExtArgs>>): Prisma__TravelPathReportClient<$Result.GetResult<Prisma.$TravelPathReportPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many TravelPathReports.
     * @param {TravelPathReportCreateManyArgs} args - Arguments to create many TravelPathReports.
     * @example
     * // Create many TravelPathReports
     * const travelPathReport = await prisma.travelPathReport.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TravelPathReportCreateManyArgs>(args?: SelectSubset<T, TravelPathReportCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TravelPathReports and returns the data saved in the database.
     * @param {TravelPathReportCreateManyAndReturnArgs} args - Arguments to create many TravelPathReports.
     * @example
     * // Create many TravelPathReports
     * const travelPathReport = await prisma.travelPathReport.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TravelPathReports and only return the `id`
     * const travelPathReportWithIdOnly = await prisma.travelPathReport.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TravelPathReportCreateManyAndReturnArgs>(args?: SelectSubset<T, TravelPathReportCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TravelPathReportPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a TravelPathReport.
     * @param {TravelPathReportDeleteArgs} args - Arguments to delete one TravelPathReport.
     * @example
     * // Delete one TravelPathReport
     * const TravelPathReport = await prisma.travelPathReport.delete({
     *   where: {
     *     // ... filter to delete one TravelPathReport
     *   }
     * })
     * 
     */
    delete<T extends TravelPathReportDeleteArgs>(args: SelectSubset<T, TravelPathReportDeleteArgs<ExtArgs>>): Prisma__TravelPathReportClient<$Result.GetResult<Prisma.$TravelPathReportPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one TravelPathReport.
     * @param {TravelPathReportUpdateArgs} args - Arguments to update one TravelPathReport.
     * @example
     * // Update one TravelPathReport
     * const travelPathReport = await prisma.travelPathReport.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TravelPathReportUpdateArgs>(args: SelectSubset<T, TravelPathReportUpdateArgs<ExtArgs>>): Prisma__TravelPathReportClient<$Result.GetResult<Prisma.$TravelPathReportPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more TravelPathReports.
     * @param {TravelPathReportDeleteManyArgs} args - Arguments to filter TravelPathReports to delete.
     * @example
     * // Delete a few TravelPathReports
     * const { count } = await prisma.travelPathReport.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TravelPathReportDeleteManyArgs>(args?: SelectSubset<T, TravelPathReportDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TravelPathReports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TravelPathReportUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TravelPathReports
     * const travelPathReport = await prisma.travelPathReport.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TravelPathReportUpdateManyArgs>(args: SelectSubset<T, TravelPathReportUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TravelPathReports and returns the data updated in the database.
     * @param {TravelPathReportUpdateManyAndReturnArgs} args - Arguments to update many TravelPathReports.
     * @example
     * // Update many TravelPathReports
     * const travelPathReport = await prisma.travelPathReport.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TravelPathReports and only return the `id`
     * const travelPathReportWithIdOnly = await prisma.travelPathReport.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TravelPathReportUpdateManyAndReturnArgs>(args: SelectSubset<T, TravelPathReportUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TravelPathReportPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one TravelPathReport.
     * @param {TravelPathReportUpsertArgs} args - Arguments to update or create a TravelPathReport.
     * @example
     * // Update or create a TravelPathReport
     * const travelPathReport = await prisma.travelPathReport.upsert({
     *   create: {
     *     // ... data to create a TravelPathReport
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TravelPathReport we want to update
     *   }
     * })
     */
    upsert<T extends TravelPathReportUpsertArgs>(args: SelectSubset<T, TravelPathReportUpsertArgs<ExtArgs>>): Prisma__TravelPathReportClient<$Result.GetResult<Prisma.$TravelPathReportPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of TravelPathReports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TravelPathReportCountArgs} args - Arguments to filter TravelPathReports to count.
     * @example
     * // Count the number of TravelPathReports
     * const count = await prisma.travelPathReport.count({
     *   where: {
     *     // ... the filter for the TravelPathReports we want to count
     *   }
     * })
    **/
    count<T extends TravelPathReportCountArgs>(
      args?: Subset<T, TravelPathReportCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TravelPathReportCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TravelPathReport.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TravelPathReportAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TravelPathReportAggregateArgs>(args: Subset<T, TravelPathReportAggregateArgs>): Prisma.PrismaPromise<GetTravelPathReportAggregateType<T>>

    /**
     * Group by TravelPathReport.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TravelPathReportGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TravelPathReportGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TravelPathReportGroupByArgs['orderBy'] }
        : { orderBy?: TravelPathReportGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TravelPathReportGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTravelPathReportGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TravelPathReport model
   */
  readonly fields: TravelPathReportFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TravelPathReport.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TravelPathReportClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    locations<T extends TravelPathReport$locationsArgs<ExtArgs> = {}>(args?: Subset<T, TravelPathReport$locationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocationCheckPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TravelPathReport model
   */ 
  interface TravelPathReportFieldRefs {
    readonly id: FieldRef<"TravelPathReport", 'Int'>
    readonly userId: FieldRef<"TravelPathReport", 'Int'>
    readonly startTime: FieldRef<"TravelPathReport", 'DateTime'>
    readonly endTime: FieldRef<"TravelPathReport", 'DateTime'>
    readonly duration: FieldRef<"TravelPathReport", 'String'>
    readonly createdAt: FieldRef<"TravelPathReport", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TravelPathReport findUnique
   */
  export type TravelPathReportFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TravelPathReport
     */
    select?: TravelPathReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TravelPathReport
     */
    omit?: TravelPathReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TravelPathReportInclude<ExtArgs> | null
    /**
     * Filter, which TravelPathReport to fetch.
     */
    where: TravelPathReportWhereUniqueInput
  }

  /**
   * TravelPathReport findUniqueOrThrow
   */
  export type TravelPathReportFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TravelPathReport
     */
    select?: TravelPathReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TravelPathReport
     */
    omit?: TravelPathReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TravelPathReportInclude<ExtArgs> | null
    /**
     * Filter, which TravelPathReport to fetch.
     */
    where: TravelPathReportWhereUniqueInput
  }

  /**
   * TravelPathReport findFirst
   */
  export type TravelPathReportFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TravelPathReport
     */
    select?: TravelPathReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TravelPathReport
     */
    omit?: TravelPathReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TravelPathReportInclude<ExtArgs> | null
    /**
     * Filter, which TravelPathReport to fetch.
     */
    where?: TravelPathReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TravelPathReports to fetch.
     */
    orderBy?: TravelPathReportOrderByWithRelationInput | TravelPathReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TravelPathReports.
     */
    cursor?: TravelPathReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TravelPathReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TravelPathReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TravelPathReports.
     */
    distinct?: TravelPathReportScalarFieldEnum | TravelPathReportScalarFieldEnum[]
  }

  /**
   * TravelPathReport findFirstOrThrow
   */
  export type TravelPathReportFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TravelPathReport
     */
    select?: TravelPathReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TravelPathReport
     */
    omit?: TravelPathReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TravelPathReportInclude<ExtArgs> | null
    /**
     * Filter, which TravelPathReport to fetch.
     */
    where?: TravelPathReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TravelPathReports to fetch.
     */
    orderBy?: TravelPathReportOrderByWithRelationInput | TravelPathReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TravelPathReports.
     */
    cursor?: TravelPathReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TravelPathReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TravelPathReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TravelPathReports.
     */
    distinct?: TravelPathReportScalarFieldEnum | TravelPathReportScalarFieldEnum[]
  }

  /**
   * TravelPathReport findMany
   */
  export type TravelPathReportFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TravelPathReport
     */
    select?: TravelPathReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TravelPathReport
     */
    omit?: TravelPathReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TravelPathReportInclude<ExtArgs> | null
    /**
     * Filter, which TravelPathReports to fetch.
     */
    where?: TravelPathReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TravelPathReports to fetch.
     */
    orderBy?: TravelPathReportOrderByWithRelationInput | TravelPathReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TravelPathReports.
     */
    cursor?: TravelPathReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TravelPathReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TravelPathReports.
     */
    skip?: number
    distinct?: TravelPathReportScalarFieldEnum | TravelPathReportScalarFieldEnum[]
  }

  /**
   * TravelPathReport create
   */
  export type TravelPathReportCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TravelPathReport
     */
    select?: TravelPathReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TravelPathReport
     */
    omit?: TravelPathReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TravelPathReportInclude<ExtArgs> | null
    /**
     * The data needed to create a TravelPathReport.
     */
    data: XOR<TravelPathReportCreateInput, TravelPathReportUncheckedCreateInput>
  }

  /**
   * TravelPathReport createMany
   */
  export type TravelPathReportCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TravelPathReports.
     */
    data: TravelPathReportCreateManyInput | TravelPathReportCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TravelPathReport createManyAndReturn
   */
  export type TravelPathReportCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TravelPathReport
     */
    select?: TravelPathReportSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TravelPathReport
     */
    omit?: TravelPathReportOmit<ExtArgs> | null
    /**
     * The data used to create many TravelPathReports.
     */
    data: TravelPathReportCreateManyInput | TravelPathReportCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TravelPathReportIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TravelPathReport update
   */
  export type TravelPathReportUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TravelPathReport
     */
    select?: TravelPathReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TravelPathReport
     */
    omit?: TravelPathReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TravelPathReportInclude<ExtArgs> | null
    /**
     * The data needed to update a TravelPathReport.
     */
    data: XOR<TravelPathReportUpdateInput, TravelPathReportUncheckedUpdateInput>
    /**
     * Choose, which TravelPathReport to update.
     */
    where: TravelPathReportWhereUniqueInput
  }

  /**
   * TravelPathReport updateMany
   */
  export type TravelPathReportUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TravelPathReports.
     */
    data: XOR<TravelPathReportUpdateManyMutationInput, TravelPathReportUncheckedUpdateManyInput>
    /**
     * Filter which TravelPathReports to update
     */
    where?: TravelPathReportWhereInput
    /**
     * Limit how many TravelPathReports to update.
     */
    limit?: number
  }

  /**
   * TravelPathReport updateManyAndReturn
   */
  export type TravelPathReportUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TravelPathReport
     */
    select?: TravelPathReportSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TravelPathReport
     */
    omit?: TravelPathReportOmit<ExtArgs> | null
    /**
     * The data used to update TravelPathReports.
     */
    data: XOR<TravelPathReportUpdateManyMutationInput, TravelPathReportUncheckedUpdateManyInput>
    /**
     * Filter which TravelPathReports to update
     */
    where?: TravelPathReportWhereInput
    /**
     * Limit how many TravelPathReports to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TravelPathReportIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * TravelPathReport upsert
   */
  export type TravelPathReportUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TravelPathReport
     */
    select?: TravelPathReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TravelPathReport
     */
    omit?: TravelPathReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TravelPathReportInclude<ExtArgs> | null
    /**
     * The filter to search for the TravelPathReport to update in case it exists.
     */
    where: TravelPathReportWhereUniqueInput
    /**
     * In case the TravelPathReport found by the `where` argument doesn't exist, create a new TravelPathReport with this data.
     */
    create: XOR<TravelPathReportCreateInput, TravelPathReportUncheckedCreateInput>
    /**
     * In case the TravelPathReport was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TravelPathReportUpdateInput, TravelPathReportUncheckedUpdateInput>
  }

  /**
   * TravelPathReport delete
   */
  export type TravelPathReportDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TravelPathReport
     */
    select?: TravelPathReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TravelPathReport
     */
    omit?: TravelPathReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TravelPathReportInclude<ExtArgs> | null
    /**
     * Filter which TravelPathReport to delete.
     */
    where: TravelPathReportWhereUniqueInput
  }

  /**
   * TravelPathReport deleteMany
   */
  export type TravelPathReportDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TravelPathReports to delete
     */
    where?: TravelPathReportWhereInput
    /**
     * Limit how many TravelPathReports to delete.
     */
    limit?: number
  }

  /**
   * TravelPathReport.locations
   */
  export type TravelPathReport$locationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationCheck
     */
    select?: LocationCheckSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LocationCheck
     */
    omit?: LocationCheckOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationCheckInclude<ExtArgs> | null
    where?: LocationCheckWhereInput
    orderBy?: LocationCheckOrderByWithRelationInput | LocationCheckOrderByWithRelationInput[]
    cursor?: LocationCheckWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LocationCheckScalarFieldEnum | LocationCheckScalarFieldEnum[]
  }

  /**
   * TravelPathReport without action
   */
  export type TravelPathReportDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TravelPathReport
     */
    select?: TravelPathReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TravelPathReport
     */
    omit?: TravelPathReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TravelPathReportInclude<ExtArgs> | null
  }


  /**
   * Model LocationCheck
   */

  export type AggregateLocationCheck = {
    _count: LocationCheckCountAggregateOutputType | null
    _avg: LocationCheckAvgAggregateOutputType | null
    _sum: LocationCheckSumAggregateOutputType | null
    _min: LocationCheckMinAggregateOutputType | null
    _max: LocationCheckMaxAggregateOutputType | null
  }

  export type LocationCheckAvgAggregateOutputType = {
    id: number | null
    travelPathReportId: number | null
  }

  export type LocationCheckSumAggregateOutputType = {
    id: number | null
    travelPathReportId: number | null
  }

  export type LocationCheckMinAggregateOutputType = {
    id: number | null
    travelPathReportId: number | null
    name: string | null
  }

  export type LocationCheckMaxAggregateOutputType = {
    id: number | null
    travelPathReportId: number | null
    name: string | null
  }

  export type LocationCheckCountAggregateOutputType = {
    id: number
    travelPathReportId: number
    name: number
    _all: number
  }


  export type LocationCheckAvgAggregateInputType = {
    id?: true
    travelPathReportId?: true
  }

  export type LocationCheckSumAggregateInputType = {
    id?: true
    travelPathReportId?: true
  }

  export type LocationCheckMinAggregateInputType = {
    id?: true
    travelPathReportId?: true
    name?: true
  }

  export type LocationCheckMaxAggregateInputType = {
    id?: true
    travelPathReportId?: true
    name?: true
  }

  export type LocationCheckCountAggregateInputType = {
    id?: true
    travelPathReportId?: true
    name?: true
    _all?: true
  }

  export type LocationCheckAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LocationCheck to aggregate.
     */
    where?: LocationCheckWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LocationChecks to fetch.
     */
    orderBy?: LocationCheckOrderByWithRelationInput | LocationCheckOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LocationCheckWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LocationChecks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LocationChecks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LocationChecks
    **/
    _count?: true | LocationCheckCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LocationCheckAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LocationCheckSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LocationCheckMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LocationCheckMaxAggregateInputType
  }

  export type GetLocationCheckAggregateType<T extends LocationCheckAggregateArgs> = {
        [P in keyof T & keyof AggregateLocationCheck]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLocationCheck[P]>
      : GetScalarType<T[P], AggregateLocationCheck[P]>
  }




  export type LocationCheckGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LocationCheckWhereInput
    orderBy?: LocationCheckOrderByWithAggregationInput | LocationCheckOrderByWithAggregationInput[]
    by: LocationCheckScalarFieldEnum[] | LocationCheckScalarFieldEnum
    having?: LocationCheckScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LocationCheckCountAggregateInputType | true
    _avg?: LocationCheckAvgAggregateInputType
    _sum?: LocationCheckSumAggregateInputType
    _min?: LocationCheckMinAggregateInputType
    _max?: LocationCheckMaxAggregateInputType
  }

  export type LocationCheckGroupByOutputType = {
    id: number
    travelPathReportId: number
    name: string
    _count: LocationCheckCountAggregateOutputType | null
    _avg: LocationCheckAvgAggregateOutputType | null
    _sum: LocationCheckSumAggregateOutputType | null
    _min: LocationCheckMinAggregateOutputType | null
    _max: LocationCheckMaxAggregateOutputType | null
  }

  type GetLocationCheckGroupByPayload<T extends LocationCheckGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LocationCheckGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LocationCheckGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LocationCheckGroupByOutputType[P]>
            : GetScalarType<T[P], LocationCheckGroupByOutputType[P]>
        }
      >
    >


  export type LocationCheckSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    travelPathReportId?: boolean
    name?: boolean
    travelPathReport?: boolean | TravelPathReportDefaultArgs<ExtArgs>
    checkItems?: boolean | LocationCheck$checkItemsArgs<ExtArgs>
    _count?: boolean | LocationCheckCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["locationCheck"]>

  export type LocationCheckSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    travelPathReportId?: boolean
    name?: boolean
    travelPathReport?: boolean | TravelPathReportDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["locationCheck"]>

  export type LocationCheckSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    travelPathReportId?: boolean
    name?: boolean
    travelPathReport?: boolean | TravelPathReportDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["locationCheck"]>

  export type LocationCheckSelectScalar = {
    id?: boolean
    travelPathReportId?: boolean
    name?: boolean
  }

  export type LocationCheckOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "travelPathReportId" | "name", ExtArgs["result"]["locationCheck"]>
  export type LocationCheckInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    travelPathReport?: boolean | TravelPathReportDefaultArgs<ExtArgs>
    checkItems?: boolean | LocationCheck$checkItemsArgs<ExtArgs>
    _count?: boolean | LocationCheckCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type LocationCheckIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    travelPathReport?: boolean | TravelPathReportDefaultArgs<ExtArgs>
  }
  export type LocationCheckIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    travelPathReport?: boolean | TravelPathReportDefaultArgs<ExtArgs>
  }

  export type $LocationCheckPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LocationCheck"
    objects: {
      travelPathReport: Prisma.$TravelPathReportPayload<ExtArgs>
      checkItems: Prisma.$CheckItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      travelPathReportId: number
      name: string
    }, ExtArgs["result"]["locationCheck"]>
    composites: {}
  }

  type LocationCheckGetPayload<S extends boolean | null | undefined | LocationCheckDefaultArgs> = $Result.GetResult<Prisma.$LocationCheckPayload, S>

  type LocationCheckCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LocationCheckFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LocationCheckCountAggregateInputType | true
    }

  export interface LocationCheckDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LocationCheck'], meta: { name: 'LocationCheck' } }
    /**
     * Find zero or one LocationCheck that matches the filter.
     * @param {LocationCheckFindUniqueArgs} args - Arguments to find a LocationCheck
     * @example
     * // Get one LocationCheck
     * const locationCheck = await prisma.locationCheck.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LocationCheckFindUniqueArgs>(args: SelectSubset<T, LocationCheckFindUniqueArgs<ExtArgs>>): Prisma__LocationCheckClient<$Result.GetResult<Prisma.$LocationCheckPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one LocationCheck that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LocationCheckFindUniqueOrThrowArgs} args - Arguments to find a LocationCheck
     * @example
     * // Get one LocationCheck
     * const locationCheck = await prisma.locationCheck.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LocationCheckFindUniqueOrThrowArgs>(args: SelectSubset<T, LocationCheckFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LocationCheckClient<$Result.GetResult<Prisma.$LocationCheckPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first LocationCheck that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationCheckFindFirstArgs} args - Arguments to find a LocationCheck
     * @example
     * // Get one LocationCheck
     * const locationCheck = await prisma.locationCheck.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LocationCheckFindFirstArgs>(args?: SelectSubset<T, LocationCheckFindFirstArgs<ExtArgs>>): Prisma__LocationCheckClient<$Result.GetResult<Prisma.$LocationCheckPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first LocationCheck that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationCheckFindFirstOrThrowArgs} args - Arguments to find a LocationCheck
     * @example
     * // Get one LocationCheck
     * const locationCheck = await prisma.locationCheck.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LocationCheckFindFirstOrThrowArgs>(args?: SelectSubset<T, LocationCheckFindFirstOrThrowArgs<ExtArgs>>): Prisma__LocationCheckClient<$Result.GetResult<Prisma.$LocationCheckPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more LocationChecks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationCheckFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LocationChecks
     * const locationChecks = await prisma.locationCheck.findMany()
     * 
     * // Get first 10 LocationChecks
     * const locationChecks = await prisma.locationCheck.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const locationCheckWithIdOnly = await prisma.locationCheck.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LocationCheckFindManyArgs>(args?: SelectSubset<T, LocationCheckFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocationCheckPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a LocationCheck.
     * @param {LocationCheckCreateArgs} args - Arguments to create a LocationCheck.
     * @example
     * // Create one LocationCheck
     * const LocationCheck = await prisma.locationCheck.create({
     *   data: {
     *     // ... data to create a LocationCheck
     *   }
     * })
     * 
     */
    create<T extends LocationCheckCreateArgs>(args: SelectSubset<T, LocationCheckCreateArgs<ExtArgs>>): Prisma__LocationCheckClient<$Result.GetResult<Prisma.$LocationCheckPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many LocationChecks.
     * @param {LocationCheckCreateManyArgs} args - Arguments to create many LocationChecks.
     * @example
     * // Create many LocationChecks
     * const locationCheck = await prisma.locationCheck.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LocationCheckCreateManyArgs>(args?: SelectSubset<T, LocationCheckCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LocationChecks and returns the data saved in the database.
     * @param {LocationCheckCreateManyAndReturnArgs} args - Arguments to create many LocationChecks.
     * @example
     * // Create many LocationChecks
     * const locationCheck = await prisma.locationCheck.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LocationChecks and only return the `id`
     * const locationCheckWithIdOnly = await prisma.locationCheck.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LocationCheckCreateManyAndReturnArgs>(args?: SelectSubset<T, LocationCheckCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocationCheckPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a LocationCheck.
     * @param {LocationCheckDeleteArgs} args - Arguments to delete one LocationCheck.
     * @example
     * // Delete one LocationCheck
     * const LocationCheck = await prisma.locationCheck.delete({
     *   where: {
     *     // ... filter to delete one LocationCheck
     *   }
     * })
     * 
     */
    delete<T extends LocationCheckDeleteArgs>(args: SelectSubset<T, LocationCheckDeleteArgs<ExtArgs>>): Prisma__LocationCheckClient<$Result.GetResult<Prisma.$LocationCheckPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one LocationCheck.
     * @param {LocationCheckUpdateArgs} args - Arguments to update one LocationCheck.
     * @example
     * // Update one LocationCheck
     * const locationCheck = await prisma.locationCheck.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LocationCheckUpdateArgs>(args: SelectSubset<T, LocationCheckUpdateArgs<ExtArgs>>): Prisma__LocationCheckClient<$Result.GetResult<Prisma.$LocationCheckPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more LocationChecks.
     * @param {LocationCheckDeleteManyArgs} args - Arguments to filter LocationChecks to delete.
     * @example
     * // Delete a few LocationChecks
     * const { count } = await prisma.locationCheck.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LocationCheckDeleteManyArgs>(args?: SelectSubset<T, LocationCheckDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LocationChecks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationCheckUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LocationChecks
     * const locationCheck = await prisma.locationCheck.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LocationCheckUpdateManyArgs>(args: SelectSubset<T, LocationCheckUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LocationChecks and returns the data updated in the database.
     * @param {LocationCheckUpdateManyAndReturnArgs} args - Arguments to update many LocationChecks.
     * @example
     * // Update many LocationChecks
     * const locationCheck = await prisma.locationCheck.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more LocationChecks and only return the `id`
     * const locationCheckWithIdOnly = await prisma.locationCheck.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LocationCheckUpdateManyAndReturnArgs>(args: SelectSubset<T, LocationCheckUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocationCheckPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one LocationCheck.
     * @param {LocationCheckUpsertArgs} args - Arguments to update or create a LocationCheck.
     * @example
     * // Update or create a LocationCheck
     * const locationCheck = await prisma.locationCheck.upsert({
     *   create: {
     *     // ... data to create a LocationCheck
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LocationCheck we want to update
     *   }
     * })
     */
    upsert<T extends LocationCheckUpsertArgs>(args: SelectSubset<T, LocationCheckUpsertArgs<ExtArgs>>): Prisma__LocationCheckClient<$Result.GetResult<Prisma.$LocationCheckPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of LocationChecks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationCheckCountArgs} args - Arguments to filter LocationChecks to count.
     * @example
     * // Count the number of LocationChecks
     * const count = await prisma.locationCheck.count({
     *   where: {
     *     // ... the filter for the LocationChecks we want to count
     *   }
     * })
    **/
    count<T extends LocationCheckCountArgs>(
      args?: Subset<T, LocationCheckCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LocationCheckCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LocationCheck.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationCheckAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LocationCheckAggregateArgs>(args: Subset<T, LocationCheckAggregateArgs>): Prisma.PrismaPromise<GetLocationCheckAggregateType<T>>

    /**
     * Group by LocationCheck.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationCheckGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LocationCheckGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LocationCheckGroupByArgs['orderBy'] }
        : { orderBy?: LocationCheckGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LocationCheckGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLocationCheckGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LocationCheck model
   */
  readonly fields: LocationCheckFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LocationCheck.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LocationCheckClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    travelPathReport<T extends TravelPathReportDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TravelPathReportDefaultArgs<ExtArgs>>): Prisma__TravelPathReportClient<$Result.GetResult<Prisma.$TravelPathReportPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    checkItems<T extends LocationCheck$checkItemsArgs<ExtArgs> = {}>(args?: Subset<T, LocationCheck$checkItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CheckItemPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LocationCheck model
   */ 
  interface LocationCheckFieldRefs {
    readonly id: FieldRef<"LocationCheck", 'Int'>
    readonly travelPathReportId: FieldRef<"LocationCheck", 'Int'>
    readonly name: FieldRef<"LocationCheck", 'String'>
  }
    

  // Custom InputTypes
  /**
   * LocationCheck findUnique
   */
  export type LocationCheckFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationCheck
     */
    select?: LocationCheckSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LocationCheck
     */
    omit?: LocationCheckOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationCheckInclude<ExtArgs> | null
    /**
     * Filter, which LocationCheck to fetch.
     */
    where: LocationCheckWhereUniqueInput
  }

  /**
   * LocationCheck findUniqueOrThrow
   */
  export type LocationCheckFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationCheck
     */
    select?: LocationCheckSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LocationCheck
     */
    omit?: LocationCheckOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationCheckInclude<ExtArgs> | null
    /**
     * Filter, which LocationCheck to fetch.
     */
    where: LocationCheckWhereUniqueInput
  }

  /**
   * LocationCheck findFirst
   */
  export type LocationCheckFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationCheck
     */
    select?: LocationCheckSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LocationCheck
     */
    omit?: LocationCheckOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationCheckInclude<ExtArgs> | null
    /**
     * Filter, which LocationCheck to fetch.
     */
    where?: LocationCheckWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LocationChecks to fetch.
     */
    orderBy?: LocationCheckOrderByWithRelationInput | LocationCheckOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LocationChecks.
     */
    cursor?: LocationCheckWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LocationChecks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LocationChecks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LocationChecks.
     */
    distinct?: LocationCheckScalarFieldEnum | LocationCheckScalarFieldEnum[]
  }

  /**
   * LocationCheck findFirstOrThrow
   */
  export type LocationCheckFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationCheck
     */
    select?: LocationCheckSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LocationCheck
     */
    omit?: LocationCheckOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationCheckInclude<ExtArgs> | null
    /**
     * Filter, which LocationCheck to fetch.
     */
    where?: LocationCheckWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LocationChecks to fetch.
     */
    orderBy?: LocationCheckOrderByWithRelationInput | LocationCheckOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LocationChecks.
     */
    cursor?: LocationCheckWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LocationChecks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LocationChecks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LocationChecks.
     */
    distinct?: LocationCheckScalarFieldEnum | LocationCheckScalarFieldEnum[]
  }

  /**
   * LocationCheck findMany
   */
  export type LocationCheckFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationCheck
     */
    select?: LocationCheckSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LocationCheck
     */
    omit?: LocationCheckOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationCheckInclude<ExtArgs> | null
    /**
     * Filter, which LocationChecks to fetch.
     */
    where?: LocationCheckWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LocationChecks to fetch.
     */
    orderBy?: LocationCheckOrderByWithRelationInput | LocationCheckOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LocationChecks.
     */
    cursor?: LocationCheckWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LocationChecks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LocationChecks.
     */
    skip?: number
    distinct?: LocationCheckScalarFieldEnum | LocationCheckScalarFieldEnum[]
  }

  /**
   * LocationCheck create
   */
  export type LocationCheckCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationCheck
     */
    select?: LocationCheckSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LocationCheck
     */
    omit?: LocationCheckOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationCheckInclude<ExtArgs> | null
    /**
     * The data needed to create a LocationCheck.
     */
    data: XOR<LocationCheckCreateInput, LocationCheckUncheckedCreateInput>
  }

  /**
   * LocationCheck createMany
   */
  export type LocationCheckCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LocationChecks.
     */
    data: LocationCheckCreateManyInput | LocationCheckCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LocationCheck createManyAndReturn
   */
  export type LocationCheckCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationCheck
     */
    select?: LocationCheckSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LocationCheck
     */
    omit?: LocationCheckOmit<ExtArgs> | null
    /**
     * The data used to create many LocationChecks.
     */
    data: LocationCheckCreateManyInput | LocationCheckCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationCheckIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LocationCheck update
   */
  export type LocationCheckUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationCheck
     */
    select?: LocationCheckSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LocationCheck
     */
    omit?: LocationCheckOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationCheckInclude<ExtArgs> | null
    /**
     * The data needed to update a LocationCheck.
     */
    data: XOR<LocationCheckUpdateInput, LocationCheckUncheckedUpdateInput>
    /**
     * Choose, which LocationCheck to update.
     */
    where: LocationCheckWhereUniqueInput
  }

  /**
   * LocationCheck updateMany
   */
  export type LocationCheckUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LocationChecks.
     */
    data: XOR<LocationCheckUpdateManyMutationInput, LocationCheckUncheckedUpdateManyInput>
    /**
     * Filter which LocationChecks to update
     */
    where?: LocationCheckWhereInput
    /**
     * Limit how many LocationChecks to update.
     */
    limit?: number
  }

  /**
   * LocationCheck updateManyAndReturn
   */
  export type LocationCheckUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationCheck
     */
    select?: LocationCheckSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LocationCheck
     */
    omit?: LocationCheckOmit<ExtArgs> | null
    /**
     * The data used to update LocationChecks.
     */
    data: XOR<LocationCheckUpdateManyMutationInput, LocationCheckUncheckedUpdateManyInput>
    /**
     * Filter which LocationChecks to update
     */
    where?: LocationCheckWhereInput
    /**
     * Limit how many LocationChecks to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationCheckIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * LocationCheck upsert
   */
  export type LocationCheckUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationCheck
     */
    select?: LocationCheckSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LocationCheck
     */
    omit?: LocationCheckOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationCheckInclude<ExtArgs> | null
    /**
     * The filter to search for the LocationCheck to update in case it exists.
     */
    where: LocationCheckWhereUniqueInput
    /**
     * In case the LocationCheck found by the `where` argument doesn't exist, create a new LocationCheck with this data.
     */
    create: XOR<LocationCheckCreateInput, LocationCheckUncheckedCreateInput>
    /**
     * In case the LocationCheck was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LocationCheckUpdateInput, LocationCheckUncheckedUpdateInput>
  }

  /**
   * LocationCheck delete
   */
  export type LocationCheckDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationCheck
     */
    select?: LocationCheckSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LocationCheck
     */
    omit?: LocationCheckOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationCheckInclude<ExtArgs> | null
    /**
     * Filter which LocationCheck to delete.
     */
    where: LocationCheckWhereUniqueInput
  }

  /**
   * LocationCheck deleteMany
   */
  export type LocationCheckDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LocationChecks to delete
     */
    where?: LocationCheckWhereInput
    /**
     * Limit how many LocationChecks to delete.
     */
    limit?: number
  }

  /**
   * LocationCheck.checkItems
   */
  export type LocationCheck$checkItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckItem
     */
    select?: CheckItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CheckItem
     */
    omit?: CheckItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckItemInclude<ExtArgs> | null
    where?: CheckItemWhereInput
    orderBy?: CheckItemOrderByWithRelationInput | CheckItemOrderByWithRelationInput[]
    cursor?: CheckItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CheckItemScalarFieldEnum | CheckItemScalarFieldEnum[]
  }

  /**
   * LocationCheck without action
   */
  export type LocationCheckDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationCheck
     */
    select?: LocationCheckSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LocationCheck
     */
    omit?: LocationCheckOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationCheckInclude<ExtArgs> | null
  }


  /**
   * Model CheckItem
   */

  export type AggregateCheckItem = {
    _count: CheckItemCountAggregateOutputType | null
    _avg: CheckItemAvgAggregateOutputType | null
    _sum: CheckItemSumAggregateOutputType | null
    _min: CheckItemMinAggregateOutputType | null
    _max: CheckItemMaxAggregateOutputType | null
  }

  export type CheckItemAvgAggregateOutputType = {
    id: number | null
    locationCheckId: number | null
  }

  export type CheckItemSumAggregateOutputType = {
    id: number | null
    locationCheckId: number | null
  }

  export type CheckItemMinAggregateOutputType = {
    id: number | null
    locationCheckId: number | null
    question: string | null
    result: boolean | null
    action: string | null
  }

  export type CheckItemMaxAggregateOutputType = {
    id: number | null
    locationCheckId: number | null
    question: string | null
    result: boolean | null
    action: string | null
  }

  export type CheckItemCountAggregateOutputType = {
    id: number
    locationCheckId: number
    question: number
    result: number
    action: number
    _all: number
  }


  export type CheckItemAvgAggregateInputType = {
    id?: true
    locationCheckId?: true
  }

  export type CheckItemSumAggregateInputType = {
    id?: true
    locationCheckId?: true
  }

  export type CheckItemMinAggregateInputType = {
    id?: true
    locationCheckId?: true
    question?: true
    result?: true
    action?: true
  }

  export type CheckItemMaxAggregateInputType = {
    id?: true
    locationCheckId?: true
    question?: true
    result?: true
    action?: true
  }

  export type CheckItemCountAggregateInputType = {
    id?: true
    locationCheckId?: true
    question?: true
    result?: true
    action?: true
    _all?: true
  }

  export type CheckItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CheckItem to aggregate.
     */
    where?: CheckItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CheckItems to fetch.
     */
    orderBy?: CheckItemOrderByWithRelationInput | CheckItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CheckItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CheckItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CheckItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CheckItems
    **/
    _count?: true | CheckItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CheckItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CheckItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CheckItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CheckItemMaxAggregateInputType
  }

  export type GetCheckItemAggregateType<T extends CheckItemAggregateArgs> = {
        [P in keyof T & keyof AggregateCheckItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCheckItem[P]>
      : GetScalarType<T[P], AggregateCheckItem[P]>
  }




  export type CheckItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CheckItemWhereInput
    orderBy?: CheckItemOrderByWithAggregationInput | CheckItemOrderByWithAggregationInput[]
    by: CheckItemScalarFieldEnum[] | CheckItemScalarFieldEnum
    having?: CheckItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CheckItemCountAggregateInputType | true
    _avg?: CheckItemAvgAggregateInputType
    _sum?: CheckItemSumAggregateInputType
    _min?: CheckItemMinAggregateInputType
    _max?: CheckItemMaxAggregateInputType
  }

  export type CheckItemGroupByOutputType = {
    id: number
    locationCheckId: number
    question: string
    result: boolean
    action: string | null
    _count: CheckItemCountAggregateOutputType | null
    _avg: CheckItemAvgAggregateOutputType | null
    _sum: CheckItemSumAggregateOutputType | null
    _min: CheckItemMinAggregateOutputType | null
    _max: CheckItemMaxAggregateOutputType | null
  }

  type GetCheckItemGroupByPayload<T extends CheckItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CheckItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CheckItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CheckItemGroupByOutputType[P]>
            : GetScalarType<T[P], CheckItemGroupByOutputType[P]>
        }
      >
    >


  export type CheckItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    locationCheckId?: boolean
    question?: boolean
    result?: boolean
    action?: boolean
    locationCheck?: boolean | LocationCheckDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["checkItem"]>

  export type CheckItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    locationCheckId?: boolean
    question?: boolean
    result?: boolean
    action?: boolean
    locationCheck?: boolean | LocationCheckDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["checkItem"]>

  export type CheckItemSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    locationCheckId?: boolean
    question?: boolean
    result?: boolean
    action?: boolean
    locationCheck?: boolean | LocationCheckDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["checkItem"]>

  export type CheckItemSelectScalar = {
    id?: boolean
    locationCheckId?: boolean
    question?: boolean
    result?: boolean
    action?: boolean
  }

  export type CheckItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "locationCheckId" | "question" | "result" | "action", ExtArgs["result"]["checkItem"]>
  export type CheckItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    locationCheck?: boolean | LocationCheckDefaultArgs<ExtArgs>
  }
  export type CheckItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    locationCheck?: boolean | LocationCheckDefaultArgs<ExtArgs>
  }
  export type CheckItemIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    locationCheck?: boolean | LocationCheckDefaultArgs<ExtArgs>
  }

  export type $CheckItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CheckItem"
    objects: {
      locationCheck: Prisma.$LocationCheckPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      locationCheckId: number
      question: string
      result: boolean
      action: string | null
    }, ExtArgs["result"]["checkItem"]>
    composites: {}
  }

  type CheckItemGetPayload<S extends boolean | null | undefined | CheckItemDefaultArgs> = $Result.GetResult<Prisma.$CheckItemPayload, S>

  type CheckItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CheckItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CheckItemCountAggregateInputType | true
    }

  export interface CheckItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CheckItem'], meta: { name: 'CheckItem' } }
    /**
     * Find zero or one CheckItem that matches the filter.
     * @param {CheckItemFindUniqueArgs} args - Arguments to find a CheckItem
     * @example
     * // Get one CheckItem
     * const checkItem = await prisma.checkItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CheckItemFindUniqueArgs>(args: SelectSubset<T, CheckItemFindUniqueArgs<ExtArgs>>): Prisma__CheckItemClient<$Result.GetResult<Prisma.$CheckItemPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one CheckItem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CheckItemFindUniqueOrThrowArgs} args - Arguments to find a CheckItem
     * @example
     * // Get one CheckItem
     * const checkItem = await prisma.checkItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CheckItemFindUniqueOrThrowArgs>(args: SelectSubset<T, CheckItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CheckItemClient<$Result.GetResult<Prisma.$CheckItemPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first CheckItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CheckItemFindFirstArgs} args - Arguments to find a CheckItem
     * @example
     * // Get one CheckItem
     * const checkItem = await prisma.checkItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CheckItemFindFirstArgs>(args?: SelectSubset<T, CheckItemFindFirstArgs<ExtArgs>>): Prisma__CheckItemClient<$Result.GetResult<Prisma.$CheckItemPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first CheckItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CheckItemFindFirstOrThrowArgs} args - Arguments to find a CheckItem
     * @example
     * // Get one CheckItem
     * const checkItem = await prisma.checkItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CheckItemFindFirstOrThrowArgs>(args?: SelectSubset<T, CheckItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__CheckItemClient<$Result.GetResult<Prisma.$CheckItemPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more CheckItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CheckItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CheckItems
     * const checkItems = await prisma.checkItem.findMany()
     * 
     * // Get first 10 CheckItems
     * const checkItems = await prisma.checkItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const checkItemWithIdOnly = await prisma.checkItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CheckItemFindManyArgs>(args?: SelectSubset<T, CheckItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CheckItemPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a CheckItem.
     * @param {CheckItemCreateArgs} args - Arguments to create a CheckItem.
     * @example
     * // Create one CheckItem
     * const CheckItem = await prisma.checkItem.create({
     *   data: {
     *     // ... data to create a CheckItem
     *   }
     * })
     * 
     */
    create<T extends CheckItemCreateArgs>(args: SelectSubset<T, CheckItemCreateArgs<ExtArgs>>): Prisma__CheckItemClient<$Result.GetResult<Prisma.$CheckItemPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many CheckItems.
     * @param {CheckItemCreateManyArgs} args - Arguments to create many CheckItems.
     * @example
     * // Create many CheckItems
     * const checkItem = await prisma.checkItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CheckItemCreateManyArgs>(args?: SelectSubset<T, CheckItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CheckItems and returns the data saved in the database.
     * @param {CheckItemCreateManyAndReturnArgs} args - Arguments to create many CheckItems.
     * @example
     * // Create many CheckItems
     * const checkItem = await prisma.checkItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CheckItems and only return the `id`
     * const checkItemWithIdOnly = await prisma.checkItem.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CheckItemCreateManyAndReturnArgs>(args?: SelectSubset<T, CheckItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CheckItemPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a CheckItem.
     * @param {CheckItemDeleteArgs} args - Arguments to delete one CheckItem.
     * @example
     * // Delete one CheckItem
     * const CheckItem = await prisma.checkItem.delete({
     *   where: {
     *     // ... filter to delete one CheckItem
     *   }
     * })
     * 
     */
    delete<T extends CheckItemDeleteArgs>(args: SelectSubset<T, CheckItemDeleteArgs<ExtArgs>>): Prisma__CheckItemClient<$Result.GetResult<Prisma.$CheckItemPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one CheckItem.
     * @param {CheckItemUpdateArgs} args - Arguments to update one CheckItem.
     * @example
     * // Update one CheckItem
     * const checkItem = await prisma.checkItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CheckItemUpdateArgs>(args: SelectSubset<T, CheckItemUpdateArgs<ExtArgs>>): Prisma__CheckItemClient<$Result.GetResult<Prisma.$CheckItemPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more CheckItems.
     * @param {CheckItemDeleteManyArgs} args - Arguments to filter CheckItems to delete.
     * @example
     * // Delete a few CheckItems
     * const { count } = await prisma.checkItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CheckItemDeleteManyArgs>(args?: SelectSubset<T, CheckItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CheckItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CheckItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CheckItems
     * const checkItem = await prisma.checkItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CheckItemUpdateManyArgs>(args: SelectSubset<T, CheckItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CheckItems and returns the data updated in the database.
     * @param {CheckItemUpdateManyAndReturnArgs} args - Arguments to update many CheckItems.
     * @example
     * // Update many CheckItems
     * const checkItem = await prisma.checkItem.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CheckItems and only return the `id`
     * const checkItemWithIdOnly = await prisma.checkItem.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CheckItemUpdateManyAndReturnArgs>(args: SelectSubset<T, CheckItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CheckItemPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one CheckItem.
     * @param {CheckItemUpsertArgs} args - Arguments to update or create a CheckItem.
     * @example
     * // Update or create a CheckItem
     * const checkItem = await prisma.checkItem.upsert({
     *   create: {
     *     // ... data to create a CheckItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CheckItem we want to update
     *   }
     * })
     */
    upsert<T extends CheckItemUpsertArgs>(args: SelectSubset<T, CheckItemUpsertArgs<ExtArgs>>): Prisma__CheckItemClient<$Result.GetResult<Prisma.$CheckItemPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of CheckItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CheckItemCountArgs} args - Arguments to filter CheckItems to count.
     * @example
     * // Count the number of CheckItems
     * const count = await prisma.checkItem.count({
     *   where: {
     *     // ... the filter for the CheckItems we want to count
     *   }
     * })
    **/
    count<T extends CheckItemCountArgs>(
      args?: Subset<T, CheckItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CheckItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CheckItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CheckItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CheckItemAggregateArgs>(args: Subset<T, CheckItemAggregateArgs>): Prisma.PrismaPromise<GetCheckItemAggregateType<T>>

    /**
     * Group by CheckItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CheckItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CheckItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CheckItemGroupByArgs['orderBy'] }
        : { orderBy?: CheckItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CheckItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCheckItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CheckItem model
   */
  readonly fields: CheckItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CheckItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CheckItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    locationCheck<T extends LocationCheckDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LocationCheckDefaultArgs<ExtArgs>>): Prisma__LocationCheckClient<$Result.GetResult<Prisma.$LocationCheckPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CheckItem model
   */ 
  interface CheckItemFieldRefs {
    readonly id: FieldRef<"CheckItem", 'Int'>
    readonly locationCheckId: FieldRef<"CheckItem", 'Int'>
    readonly question: FieldRef<"CheckItem", 'String'>
    readonly result: FieldRef<"CheckItem", 'Boolean'>
    readonly action: FieldRef<"CheckItem", 'String'>
  }
    

  // Custom InputTypes
  /**
   * CheckItem findUnique
   */
  export type CheckItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckItem
     */
    select?: CheckItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CheckItem
     */
    omit?: CheckItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckItemInclude<ExtArgs> | null
    /**
     * Filter, which CheckItem to fetch.
     */
    where: CheckItemWhereUniqueInput
  }

  /**
   * CheckItem findUniqueOrThrow
   */
  export type CheckItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckItem
     */
    select?: CheckItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CheckItem
     */
    omit?: CheckItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckItemInclude<ExtArgs> | null
    /**
     * Filter, which CheckItem to fetch.
     */
    where: CheckItemWhereUniqueInput
  }

  /**
   * CheckItem findFirst
   */
  export type CheckItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckItem
     */
    select?: CheckItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CheckItem
     */
    omit?: CheckItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckItemInclude<ExtArgs> | null
    /**
     * Filter, which CheckItem to fetch.
     */
    where?: CheckItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CheckItems to fetch.
     */
    orderBy?: CheckItemOrderByWithRelationInput | CheckItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CheckItems.
     */
    cursor?: CheckItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CheckItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CheckItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CheckItems.
     */
    distinct?: CheckItemScalarFieldEnum | CheckItemScalarFieldEnum[]
  }

  /**
   * CheckItem findFirstOrThrow
   */
  export type CheckItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckItem
     */
    select?: CheckItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CheckItem
     */
    omit?: CheckItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckItemInclude<ExtArgs> | null
    /**
     * Filter, which CheckItem to fetch.
     */
    where?: CheckItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CheckItems to fetch.
     */
    orderBy?: CheckItemOrderByWithRelationInput | CheckItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CheckItems.
     */
    cursor?: CheckItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CheckItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CheckItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CheckItems.
     */
    distinct?: CheckItemScalarFieldEnum | CheckItemScalarFieldEnum[]
  }

  /**
   * CheckItem findMany
   */
  export type CheckItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckItem
     */
    select?: CheckItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CheckItem
     */
    omit?: CheckItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckItemInclude<ExtArgs> | null
    /**
     * Filter, which CheckItems to fetch.
     */
    where?: CheckItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CheckItems to fetch.
     */
    orderBy?: CheckItemOrderByWithRelationInput | CheckItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CheckItems.
     */
    cursor?: CheckItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CheckItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CheckItems.
     */
    skip?: number
    distinct?: CheckItemScalarFieldEnum | CheckItemScalarFieldEnum[]
  }

  /**
   * CheckItem create
   */
  export type CheckItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckItem
     */
    select?: CheckItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CheckItem
     */
    omit?: CheckItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckItemInclude<ExtArgs> | null
    /**
     * The data needed to create a CheckItem.
     */
    data: XOR<CheckItemCreateInput, CheckItemUncheckedCreateInput>
  }

  /**
   * CheckItem createMany
   */
  export type CheckItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CheckItems.
     */
    data: CheckItemCreateManyInput | CheckItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CheckItem createManyAndReturn
   */
  export type CheckItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckItem
     */
    select?: CheckItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CheckItem
     */
    omit?: CheckItemOmit<ExtArgs> | null
    /**
     * The data used to create many CheckItems.
     */
    data: CheckItemCreateManyInput | CheckItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CheckItem update
   */
  export type CheckItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckItem
     */
    select?: CheckItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CheckItem
     */
    omit?: CheckItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckItemInclude<ExtArgs> | null
    /**
     * The data needed to update a CheckItem.
     */
    data: XOR<CheckItemUpdateInput, CheckItemUncheckedUpdateInput>
    /**
     * Choose, which CheckItem to update.
     */
    where: CheckItemWhereUniqueInput
  }

  /**
   * CheckItem updateMany
   */
  export type CheckItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CheckItems.
     */
    data: XOR<CheckItemUpdateManyMutationInput, CheckItemUncheckedUpdateManyInput>
    /**
     * Filter which CheckItems to update
     */
    where?: CheckItemWhereInput
    /**
     * Limit how many CheckItems to update.
     */
    limit?: number
  }

  /**
   * CheckItem updateManyAndReturn
   */
  export type CheckItemUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckItem
     */
    select?: CheckItemSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CheckItem
     */
    omit?: CheckItemOmit<ExtArgs> | null
    /**
     * The data used to update CheckItems.
     */
    data: XOR<CheckItemUpdateManyMutationInput, CheckItemUncheckedUpdateManyInput>
    /**
     * Filter which CheckItems to update
     */
    where?: CheckItemWhereInput
    /**
     * Limit how many CheckItems to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckItemIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CheckItem upsert
   */
  export type CheckItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckItem
     */
    select?: CheckItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CheckItem
     */
    omit?: CheckItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckItemInclude<ExtArgs> | null
    /**
     * The filter to search for the CheckItem to update in case it exists.
     */
    where: CheckItemWhereUniqueInput
    /**
     * In case the CheckItem found by the `where` argument doesn't exist, create a new CheckItem with this data.
     */
    create: XOR<CheckItemCreateInput, CheckItemUncheckedCreateInput>
    /**
     * In case the CheckItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CheckItemUpdateInput, CheckItemUncheckedUpdateInput>
  }

  /**
   * CheckItem delete
   */
  export type CheckItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckItem
     */
    select?: CheckItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CheckItem
     */
    omit?: CheckItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckItemInclude<ExtArgs> | null
    /**
     * Filter which CheckItem to delete.
     */
    where: CheckItemWhereUniqueInput
  }

  /**
   * CheckItem deleteMany
   */
  export type CheckItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CheckItems to delete
     */
    where?: CheckItemWhereInput
    /**
     * Limit how many CheckItems to delete.
     */
    limit?: number
  }

  /**
   * CheckItem without action
   */
  export type CheckItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckItem
     */
    select?: CheckItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CheckItem
     */
    omit?: CheckItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckItemInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const NoteScalarFieldEnum: {
    id: 'id',
    title: 'title',
    content: 'content',
    createdAt: 'createdAt'
  };

  export type NoteScalarFieldEnum = (typeof NoteScalarFieldEnum)[keyof typeof NoteScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    name: 'name',
    password: 'password',
    store: 'store',
    isVerified: 'isVerified',
    role: 'role',
    verificationToken: 'verificationToken',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const TravelPathReportScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    startTime: 'startTime',
    endTime: 'endTime',
    duration: 'duration',
    createdAt: 'createdAt'
  };

  export type TravelPathReportScalarFieldEnum = (typeof TravelPathReportScalarFieldEnum)[keyof typeof TravelPathReportScalarFieldEnum]


  export const LocationCheckScalarFieldEnum: {
    id: 'id',
    travelPathReportId: 'travelPathReportId',
    name: 'name'
  };

  export type LocationCheckScalarFieldEnum = (typeof LocationCheckScalarFieldEnum)[keyof typeof LocationCheckScalarFieldEnum]


  export const CheckItemScalarFieldEnum: {
    id: 'id',
    locationCheckId: 'locationCheckId',
    question: 'question',
    result: 'result',
    action: 'action'
  };

  export type CheckItemScalarFieldEnum = (typeof CheckItemScalarFieldEnum)[keyof typeof CheckItemScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Store'
   */
  export type EnumStoreFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Store'>
    


  /**
   * Reference to a field of type 'Store[]'
   */
  export type ListEnumStoreFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Store[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type NoteWhereInput = {
    AND?: NoteWhereInput | NoteWhereInput[]
    OR?: NoteWhereInput[]
    NOT?: NoteWhereInput | NoteWhereInput[]
    id?: StringFilter<"Note"> | string
    title?: StringFilter<"Note"> | string
    content?: StringFilter<"Note"> | string
    createdAt?: DateTimeFilter<"Note"> | Date | string
  }

  export type NoteOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
  }

  export type NoteWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NoteWhereInput | NoteWhereInput[]
    OR?: NoteWhereInput[]
    NOT?: NoteWhereInput | NoteWhereInput[]
    title?: StringFilter<"Note"> | string
    content?: StringFilter<"Note"> | string
    createdAt?: DateTimeFilter<"Note"> | Date | string
  }, "id">

  export type NoteOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    _count?: NoteCountOrderByAggregateInput
    _max?: NoteMaxOrderByAggregateInput
    _min?: NoteMinOrderByAggregateInput
  }

  export type NoteScalarWhereWithAggregatesInput = {
    AND?: NoteScalarWhereWithAggregatesInput | NoteScalarWhereWithAggregatesInput[]
    OR?: NoteScalarWhereWithAggregatesInput[]
    NOT?: NoteScalarWhereWithAggregatesInput | NoteScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Note"> | string
    title?: StringWithAggregatesFilter<"Note"> | string
    content?: StringWithAggregatesFilter<"Note"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Note"> | Date | string
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    store?: EnumStoreFilter<"User"> | $Enums.Store
    isVerified?: BoolFilter<"User"> | boolean
    role?: EnumRoleFilter<"User"> | $Enums.Role
    verificationToken?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    travelPathReports?: TravelPathReportListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    store?: SortOrder
    isVerified?: SortOrder
    role?: SortOrder
    verificationToken?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    travelPathReports?: TravelPathReportOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    store?: EnumStoreFilter<"User"> | $Enums.Store
    isVerified?: BoolFilter<"User"> | boolean
    role?: EnumRoleFilter<"User"> | $Enums.Role
    verificationToken?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    travelPathReports?: TravelPathReportListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    store?: SortOrder
    isVerified?: SortOrder
    role?: SortOrder
    verificationToken?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    email?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    store?: EnumStoreWithAggregatesFilter<"User"> | $Enums.Store
    isVerified?: BoolWithAggregatesFilter<"User"> | boolean
    role?: EnumRoleWithAggregatesFilter<"User"> | $Enums.Role
    verificationToken?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type TravelPathReportWhereInput = {
    AND?: TravelPathReportWhereInput | TravelPathReportWhereInput[]
    OR?: TravelPathReportWhereInput[]
    NOT?: TravelPathReportWhereInput | TravelPathReportWhereInput[]
    id?: IntFilter<"TravelPathReport"> | number
    userId?: IntFilter<"TravelPathReport"> | number
    startTime?: DateTimeFilter<"TravelPathReport"> | Date | string
    endTime?: DateTimeFilter<"TravelPathReport"> | Date | string
    duration?: StringFilter<"TravelPathReport"> | string
    createdAt?: DateTimeFilter<"TravelPathReport"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    locations?: LocationCheckListRelationFilter
  }

  export type TravelPathReportOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    duration?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    locations?: LocationCheckOrderByRelationAggregateInput
  }

  export type TravelPathReportWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TravelPathReportWhereInput | TravelPathReportWhereInput[]
    OR?: TravelPathReportWhereInput[]
    NOT?: TravelPathReportWhereInput | TravelPathReportWhereInput[]
    userId?: IntFilter<"TravelPathReport"> | number
    startTime?: DateTimeFilter<"TravelPathReport"> | Date | string
    endTime?: DateTimeFilter<"TravelPathReport"> | Date | string
    duration?: StringFilter<"TravelPathReport"> | string
    createdAt?: DateTimeFilter<"TravelPathReport"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    locations?: LocationCheckListRelationFilter
  }, "id">

  export type TravelPathReportOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    duration?: SortOrder
    createdAt?: SortOrder
    _count?: TravelPathReportCountOrderByAggregateInput
    _avg?: TravelPathReportAvgOrderByAggregateInput
    _max?: TravelPathReportMaxOrderByAggregateInput
    _min?: TravelPathReportMinOrderByAggregateInput
    _sum?: TravelPathReportSumOrderByAggregateInput
  }

  export type TravelPathReportScalarWhereWithAggregatesInput = {
    AND?: TravelPathReportScalarWhereWithAggregatesInput | TravelPathReportScalarWhereWithAggregatesInput[]
    OR?: TravelPathReportScalarWhereWithAggregatesInput[]
    NOT?: TravelPathReportScalarWhereWithAggregatesInput | TravelPathReportScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"TravelPathReport"> | number
    userId?: IntWithAggregatesFilter<"TravelPathReport"> | number
    startTime?: DateTimeWithAggregatesFilter<"TravelPathReport"> | Date | string
    endTime?: DateTimeWithAggregatesFilter<"TravelPathReport"> | Date | string
    duration?: StringWithAggregatesFilter<"TravelPathReport"> | string
    createdAt?: DateTimeWithAggregatesFilter<"TravelPathReport"> | Date | string
  }

  export type LocationCheckWhereInput = {
    AND?: LocationCheckWhereInput | LocationCheckWhereInput[]
    OR?: LocationCheckWhereInput[]
    NOT?: LocationCheckWhereInput | LocationCheckWhereInput[]
    id?: IntFilter<"LocationCheck"> | number
    travelPathReportId?: IntFilter<"LocationCheck"> | number
    name?: StringFilter<"LocationCheck"> | string
    travelPathReport?: XOR<TravelPathReportScalarRelationFilter, TravelPathReportWhereInput>
    checkItems?: CheckItemListRelationFilter
  }

  export type LocationCheckOrderByWithRelationInput = {
    id?: SortOrder
    travelPathReportId?: SortOrder
    name?: SortOrder
    travelPathReport?: TravelPathReportOrderByWithRelationInput
    checkItems?: CheckItemOrderByRelationAggregateInput
  }

  export type LocationCheckWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: LocationCheckWhereInput | LocationCheckWhereInput[]
    OR?: LocationCheckWhereInput[]
    NOT?: LocationCheckWhereInput | LocationCheckWhereInput[]
    travelPathReportId?: IntFilter<"LocationCheck"> | number
    name?: StringFilter<"LocationCheck"> | string
    travelPathReport?: XOR<TravelPathReportScalarRelationFilter, TravelPathReportWhereInput>
    checkItems?: CheckItemListRelationFilter
  }, "id">

  export type LocationCheckOrderByWithAggregationInput = {
    id?: SortOrder
    travelPathReportId?: SortOrder
    name?: SortOrder
    _count?: LocationCheckCountOrderByAggregateInput
    _avg?: LocationCheckAvgOrderByAggregateInput
    _max?: LocationCheckMaxOrderByAggregateInput
    _min?: LocationCheckMinOrderByAggregateInput
    _sum?: LocationCheckSumOrderByAggregateInput
  }

  export type LocationCheckScalarWhereWithAggregatesInput = {
    AND?: LocationCheckScalarWhereWithAggregatesInput | LocationCheckScalarWhereWithAggregatesInput[]
    OR?: LocationCheckScalarWhereWithAggregatesInput[]
    NOT?: LocationCheckScalarWhereWithAggregatesInput | LocationCheckScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"LocationCheck"> | number
    travelPathReportId?: IntWithAggregatesFilter<"LocationCheck"> | number
    name?: StringWithAggregatesFilter<"LocationCheck"> | string
  }

  export type CheckItemWhereInput = {
    AND?: CheckItemWhereInput | CheckItemWhereInput[]
    OR?: CheckItemWhereInput[]
    NOT?: CheckItemWhereInput | CheckItemWhereInput[]
    id?: IntFilter<"CheckItem"> | number
    locationCheckId?: IntFilter<"CheckItem"> | number
    question?: StringFilter<"CheckItem"> | string
    result?: BoolFilter<"CheckItem"> | boolean
    action?: StringNullableFilter<"CheckItem"> | string | null
    locationCheck?: XOR<LocationCheckScalarRelationFilter, LocationCheckWhereInput>
  }

  export type CheckItemOrderByWithRelationInput = {
    id?: SortOrder
    locationCheckId?: SortOrder
    question?: SortOrder
    result?: SortOrder
    action?: SortOrderInput | SortOrder
    locationCheck?: LocationCheckOrderByWithRelationInput
  }

  export type CheckItemWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CheckItemWhereInput | CheckItemWhereInput[]
    OR?: CheckItemWhereInput[]
    NOT?: CheckItemWhereInput | CheckItemWhereInput[]
    locationCheckId?: IntFilter<"CheckItem"> | number
    question?: StringFilter<"CheckItem"> | string
    result?: BoolFilter<"CheckItem"> | boolean
    action?: StringNullableFilter<"CheckItem"> | string | null
    locationCheck?: XOR<LocationCheckScalarRelationFilter, LocationCheckWhereInput>
  }, "id">

  export type CheckItemOrderByWithAggregationInput = {
    id?: SortOrder
    locationCheckId?: SortOrder
    question?: SortOrder
    result?: SortOrder
    action?: SortOrderInput | SortOrder
    _count?: CheckItemCountOrderByAggregateInput
    _avg?: CheckItemAvgOrderByAggregateInput
    _max?: CheckItemMaxOrderByAggregateInput
    _min?: CheckItemMinOrderByAggregateInput
    _sum?: CheckItemSumOrderByAggregateInput
  }

  export type CheckItemScalarWhereWithAggregatesInput = {
    AND?: CheckItemScalarWhereWithAggregatesInput | CheckItemScalarWhereWithAggregatesInput[]
    OR?: CheckItemScalarWhereWithAggregatesInput[]
    NOT?: CheckItemScalarWhereWithAggregatesInput | CheckItemScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CheckItem"> | number
    locationCheckId?: IntWithAggregatesFilter<"CheckItem"> | number
    question?: StringWithAggregatesFilter<"CheckItem"> | string
    result?: BoolWithAggregatesFilter<"CheckItem"> | boolean
    action?: StringNullableWithAggregatesFilter<"CheckItem"> | string | null
  }

  export type NoteCreateInput = {
    id?: string
    title: string
    content: string
    createdAt?: Date | string
  }

  export type NoteUncheckedCreateInput = {
    id?: string
    title: string
    content: string
    createdAt?: Date | string
  }

  export type NoteUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NoteUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NoteCreateManyInput = {
    id?: string
    title: string
    content: string
    createdAt?: Date | string
  }

  export type NoteUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NoteUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateInput = {
    email: string
    name: string
    password: string
    store?: $Enums.Store
    isVerified?: boolean
    role?: $Enums.Role
    verificationToken?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    travelPathReports?: TravelPathReportCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email: string
    name: string
    password: string
    store?: $Enums.Store
    isVerified?: boolean
    role?: $Enums.Role
    verificationToken?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    travelPathReports?: TravelPathReportUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    store?: EnumStoreFieldUpdateOperationsInput | $Enums.Store
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    travelPathReports?: TravelPathReportUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    store?: EnumStoreFieldUpdateOperationsInput | $Enums.Store
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    travelPathReports?: TravelPathReportUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    email: string
    name: string
    password: string
    store?: $Enums.Store
    isVerified?: boolean
    role?: $Enums.Role
    verificationToken?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    store?: EnumStoreFieldUpdateOperationsInput | $Enums.Store
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    store?: EnumStoreFieldUpdateOperationsInput | $Enums.Store
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TravelPathReportCreateInput = {
    startTime: Date | string
    endTime: Date | string
    duration: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutTravelPathReportsInput
    locations?: LocationCheckCreateNestedManyWithoutTravelPathReportInput
  }

  export type TravelPathReportUncheckedCreateInput = {
    id?: number
    userId: number
    startTime: Date | string
    endTime: Date | string
    duration: string
    createdAt?: Date | string
    locations?: LocationCheckUncheckedCreateNestedManyWithoutTravelPathReportInput
  }

  export type TravelPathReportUpdateInput = {
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutTravelPathReportsNestedInput
    locations?: LocationCheckUpdateManyWithoutTravelPathReportNestedInput
  }

  export type TravelPathReportUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locations?: LocationCheckUncheckedUpdateManyWithoutTravelPathReportNestedInput
  }

  export type TravelPathReportCreateManyInput = {
    id?: number
    userId: number
    startTime: Date | string
    endTime: Date | string
    duration: string
    createdAt?: Date | string
  }

  export type TravelPathReportUpdateManyMutationInput = {
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TravelPathReportUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LocationCheckCreateInput = {
    name: string
    travelPathReport: TravelPathReportCreateNestedOneWithoutLocationsInput
    checkItems?: CheckItemCreateNestedManyWithoutLocationCheckInput
  }

  export type LocationCheckUncheckedCreateInput = {
    id?: number
    travelPathReportId: number
    name: string
    checkItems?: CheckItemUncheckedCreateNestedManyWithoutLocationCheckInput
  }

  export type LocationCheckUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    travelPathReport?: TravelPathReportUpdateOneRequiredWithoutLocationsNestedInput
    checkItems?: CheckItemUpdateManyWithoutLocationCheckNestedInput
  }

  export type LocationCheckUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    travelPathReportId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    checkItems?: CheckItemUncheckedUpdateManyWithoutLocationCheckNestedInput
  }

  export type LocationCheckCreateManyInput = {
    id?: number
    travelPathReportId: number
    name: string
  }

  export type LocationCheckUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type LocationCheckUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    travelPathReportId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type CheckItemCreateInput = {
    question: string
    result: boolean
    action?: string | null
    locationCheck: LocationCheckCreateNestedOneWithoutCheckItemsInput
  }

  export type CheckItemUncheckedCreateInput = {
    id?: number
    locationCheckId: number
    question: string
    result: boolean
    action?: string | null
  }

  export type CheckItemUpdateInput = {
    question?: StringFieldUpdateOperationsInput | string
    result?: BoolFieldUpdateOperationsInput | boolean
    action?: NullableStringFieldUpdateOperationsInput | string | null
    locationCheck?: LocationCheckUpdateOneRequiredWithoutCheckItemsNestedInput
  }

  export type CheckItemUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    locationCheckId?: IntFieldUpdateOperationsInput | number
    question?: StringFieldUpdateOperationsInput | string
    result?: BoolFieldUpdateOperationsInput | boolean
    action?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CheckItemCreateManyInput = {
    id?: number
    locationCheckId: number
    question: string
    result: boolean
    action?: string | null
  }

  export type CheckItemUpdateManyMutationInput = {
    question?: StringFieldUpdateOperationsInput | string
    result?: BoolFieldUpdateOperationsInput | boolean
    action?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CheckItemUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    locationCheckId?: IntFieldUpdateOperationsInput | number
    question?: StringFieldUpdateOperationsInput | string
    result?: BoolFieldUpdateOperationsInput | boolean
    action?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NoteCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
  }

  export type NoteMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
  }

  export type NoteMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type EnumStoreFilter<$PrismaModel = never> = {
    equals?: $Enums.Store | EnumStoreFieldRefInput<$PrismaModel>
    in?: $Enums.Store[] | ListEnumStoreFieldRefInput<$PrismaModel>
    notIn?: $Enums.Store[] | ListEnumStoreFieldRefInput<$PrismaModel>
    not?: NestedEnumStoreFilter<$PrismaModel> | $Enums.Store
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type TravelPathReportListRelationFilter = {
    every?: TravelPathReportWhereInput
    some?: TravelPathReportWhereInput
    none?: TravelPathReportWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type TravelPathReportOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    store?: SortOrder
    isVerified?: SortOrder
    role?: SortOrder
    verificationToken?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    store?: SortOrder
    isVerified?: SortOrder
    role?: SortOrder
    verificationToken?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    store?: SortOrder
    isVerified?: SortOrder
    role?: SortOrder
    verificationToken?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type EnumStoreWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Store | EnumStoreFieldRefInput<$PrismaModel>
    in?: $Enums.Store[] | ListEnumStoreFieldRefInput<$PrismaModel>
    notIn?: $Enums.Store[] | ListEnumStoreFieldRefInput<$PrismaModel>
    not?: NestedEnumStoreWithAggregatesFilter<$PrismaModel> | $Enums.Store
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStoreFilter<$PrismaModel>
    _max?: NestedEnumStoreFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type LocationCheckListRelationFilter = {
    every?: LocationCheckWhereInput
    some?: LocationCheckWhereInput
    none?: LocationCheckWhereInput
  }

  export type LocationCheckOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TravelPathReportCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    duration?: SortOrder
    createdAt?: SortOrder
  }

  export type TravelPathReportAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type TravelPathReportMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    duration?: SortOrder
    createdAt?: SortOrder
  }

  export type TravelPathReportMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    duration?: SortOrder
    createdAt?: SortOrder
  }

  export type TravelPathReportSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type TravelPathReportScalarRelationFilter = {
    is?: TravelPathReportWhereInput
    isNot?: TravelPathReportWhereInput
  }

  export type CheckItemListRelationFilter = {
    every?: CheckItemWhereInput
    some?: CheckItemWhereInput
    none?: CheckItemWhereInput
  }

  export type CheckItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LocationCheckCountOrderByAggregateInput = {
    id?: SortOrder
    travelPathReportId?: SortOrder
    name?: SortOrder
  }

  export type LocationCheckAvgOrderByAggregateInput = {
    id?: SortOrder
    travelPathReportId?: SortOrder
  }

  export type LocationCheckMaxOrderByAggregateInput = {
    id?: SortOrder
    travelPathReportId?: SortOrder
    name?: SortOrder
  }

  export type LocationCheckMinOrderByAggregateInput = {
    id?: SortOrder
    travelPathReportId?: SortOrder
    name?: SortOrder
  }

  export type LocationCheckSumOrderByAggregateInput = {
    id?: SortOrder
    travelPathReportId?: SortOrder
  }

  export type LocationCheckScalarRelationFilter = {
    is?: LocationCheckWhereInput
    isNot?: LocationCheckWhereInput
  }

  export type CheckItemCountOrderByAggregateInput = {
    id?: SortOrder
    locationCheckId?: SortOrder
    question?: SortOrder
    result?: SortOrder
    action?: SortOrder
  }

  export type CheckItemAvgOrderByAggregateInput = {
    id?: SortOrder
    locationCheckId?: SortOrder
  }

  export type CheckItemMaxOrderByAggregateInput = {
    id?: SortOrder
    locationCheckId?: SortOrder
    question?: SortOrder
    result?: SortOrder
    action?: SortOrder
  }

  export type CheckItemMinOrderByAggregateInput = {
    id?: SortOrder
    locationCheckId?: SortOrder
    question?: SortOrder
    result?: SortOrder
    action?: SortOrder
  }

  export type CheckItemSumOrderByAggregateInput = {
    id?: SortOrder
    locationCheckId?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type TravelPathReportCreateNestedManyWithoutUserInput = {
    create?: XOR<TravelPathReportCreateWithoutUserInput, TravelPathReportUncheckedCreateWithoutUserInput> | TravelPathReportCreateWithoutUserInput[] | TravelPathReportUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TravelPathReportCreateOrConnectWithoutUserInput | TravelPathReportCreateOrConnectWithoutUserInput[]
    createMany?: TravelPathReportCreateManyUserInputEnvelope
    connect?: TravelPathReportWhereUniqueInput | TravelPathReportWhereUniqueInput[]
  }

  export type TravelPathReportUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<TravelPathReportCreateWithoutUserInput, TravelPathReportUncheckedCreateWithoutUserInput> | TravelPathReportCreateWithoutUserInput[] | TravelPathReportUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TravelPathReportCreateOrConnectWithoutUserInput | TravelPathReportCreateOrConnectWithoutUserInput[]
    createMany?: TravelPathReportCreateManyUserInputEnvelope
    connect?: TravelPathReportWhereUniqueInput | TravelPathReportWhereUniqueInput[]
  }

  export type EnumStoreFieldUpdateOperationsInput = {
    set?: $Enums.Store
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type TravelPathReportUpdateManyWithoutUserNestedInput = {
    create?: XOR<TravelPathReportCreateWithoutUserInput, TravelPathReportUncheckedCreateWithoutUserInput> | TravelPathReportCreateWithoutUserInput[] | TravelPathReportUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TravelPathReportCreateOrConnectWithoutUserInput | TravelPathReportCreateOrConnectWithoutUserInput[]
    upsert?: TravelPathReportUpsertWithWhereUniqueWithoutUserInput | TravelPathReportUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TravelPathReportCreateManyUserInputEnvelope
    set?: TravelPathReportWhereUniqueInput | TravelPathReportWhereUniqueInput[]
    disconnect?: TravelPathReportWhereUniqueInput | TravelPathReportWhereUniqueInput[]
    delete?: TravelPathReportWhereUniqueInput | TravelPathReportWhereUniqueInput[]
    connect?: TravelPathReportWhereUniqueInput | TravelPathReportWhereUniqueInput[]
    update?: TravelPathReportUpdateWithWhereUniqueWithoutUserInput | TravelPathReportUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TravelPathReportUpdateManyWithWhereWithoutUserInput | TravelPathReportUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TravelPathReportScalarWhereInput | TravelPathReportScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type TravelPathReportUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<TravelPathReportCreateWithoutUserInput, TravelPathReportUncheckedCreateWithoutUserInput> | TravelPathReportCreateWithoutUserInput[] | TravelPathReportUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TravelPathReportCreateOrConnectWithoutUserInput | TravelPathReportCreateOrConnectWithoutUserInput[]
    upsert?: TravelPathReportUpsertWithWhereUniqueWithoutUserInput | TravelPathReportUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TravelPathReportCreateManyUserInputEnvelope
    set?: TravelPathReportWhereUniqueInput | TravelPathReportWhereUniqueInput[]
    disconnect?: TravelPathReportWhereUniqueInput | TravelPathReportWhereUniqueInput[]
    delete?: TravelPathReportWhereUniqueInput | TravelPathReportWhereUniqueInput[]
    connect?: TravelPathReportWhereUniqueInput | TravelPathReportWhereUniqueInput[]
    update?: TravelPathReportUpdateWithWhereUniqueWithoutUserInput | TravelPathReportUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TravelPathReportUpdateManyWithWhereWithoutUserInput | TravelPathReportUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TravelPathReportScalarWhereInput | TravelPathReportScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutTravelPathReportsInput = {
    create?: XOR<UserCreateWithoutTravelPathReportsInput, UserUncheckedCreateWithoutTravelPathReportsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTravelPathReportsInput
    connect?: UserWhereUniqueInput
  }

  export type LocationCheckCreateNestedManyWithoutTravelPathReportInput = {
    create?: XOR<LocationCheckCreateWithoutTravelPathReportInput, LocationCheckUncheckedCreateWithoutTravelPathReportInput> | LocationCheckCreateWithoutTravelPathReportInput[] | LocationCheckUncheckedCreateWithoutTravelPathReportInput[]
    connectOrCreate?: LocationCheckCreateOrConnectWithoutTravelPathReportInput | LocationCheckCreateOrConnectWithoutTravelPathReportInput[]
    createMany?: LocationCheckCreateManyTravelPathReportInputEnvelope
    connect?: LocationCheckWhereUniqueInput | LocationCheckWhereUniqueInput[]
  }

  export type LocationCheckUncheckedCreateNestedManyWithoutTravelPathReportInput = {
    create?: XOR<LocationCheckCreateWithoutTravelPathReportInput, LocationCheckUncheckedCreateWithoutTravelPathReportInput> | LocationCheckCreateWithoutTravelPathReportInput[] | LocationCheckUncheckedCreateWithoutTravelPathReportInput[]
    connectOrCreate?: LocationCheckCreateOrConnectWithoutTravelPathReportInput | LocationCheckCreateOrConnectWithoutTravelPathReportInput[]
    createMany?: LocationCheckCreateManyTravelPathReportInputEnvelope
    connect?: LocationCheckWhereUniqueInput | LocationCheckWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutTravelPathReportsNestedInput = {
    create?: XOR<UserCreateWithoutTravelPathReportsInput, UserUncheckedCreateWithoutTravelPathReportsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTravelPathReportsInput
    upsert?: UserUpsertWithoutTravelPathReportsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTravelPathReportsInput, UserUpdateWithoutTravelPathReportsInput>, UserUncheckedUpdateWithoutTravelPathReportsInput>
  }

  export type LocationCheckUpdateManyWithoutTravelPathReportNestedInput = {
    create?: XOR<LocationCheckCreateWithoutTravelPathReportInput, LocationCheckUncheckedCreateWithoutTravelPathReportInput> | LocationCheckCreateWithoutTravelPathReportInput[] | LocationCheckUncheckedCreateWithoutTravelPathReportInput[]
    connectOrCreate?: LocationCheckCreateOrConnectWithoutTravelPathReportInput | LocationCheckCreateOrConnectWithoutTravelPathReportInput[]
    upsert?: LocationCheckUpsertWithWhereUniqueWithoutTravelPathReportInput | LocationCheckUpsertWithWhereUniqueWithoutTravelPathReportInput[]
    createMany?: LocationCheckCreateManyTravelPathReportInputEnvelope
    set?: LocationCheckWhereUniqueInput | LocationCheckWhereUniqueInput[]
    disconnect?: LocationCheckWhereUniqueInput | LocationCheckWhereUniqueInput[]
    delete?: LocationCheckWhereUniqueInput | LocationCheckWhereUniqueInput[]
    connect?: LocationCheckWhereUniqueInput | LocationCheckWhereUniqueInput[]
    update?: LocationCheckUpdateWithWhereUniqueWithoutTravelPathReportInput | LocationCheckUpdateWithWhereUniqueWithoutTravelPathReportInput[]
    updateMany?: LocationCheckUpdateManyWithWhereWithoutTravelPathReportInput | LocationCheckUpdateManyWithWhereWithoutTravelPathReportInput[]
    deleteMany?: LocationCheckScalarWhereInput | LocationCheckScalarWhereInput[]
  }

  export type LocationCheckUncheckedUpdateManyWithoutTravelPathReportNestedInput = {
    create?: XOR<LocationCheckCreateWithoutTravelPathReportInput, LocationCheckUncheckedCreateWithoutTravelPathReportInput> | LocationCheckCreateWithoutTravelPathReportInput[] | LocationCheckUncheckedCreateWithoutTravelPathReportInput[]
    connectOrCreate?: LocationCheckCreateOrConnectWithoutTravelPathReportInput | LocationCheckCreateOrConnectWithoutTravelPathReportInput[]
    upsert?: LocationCheckUpsertWithWhereUniqueWithoutTravelPathReportInput | LocationCheckUpsertWithWhereUniqueWithoutTravelPathReportInput[]
    createMany?: LocationCheckCreateManyTravelPathReportInputEnvelope
    set?: LocationCheckWhereUniqueInput | LocationCheckWhereUniqueInput[]
    disconnect?: LocationCheckWhereUniqueInput | LocationCheckWhereUniqueInput[]
    delete?: LocationCheckWhereUniqueInput | LocationCheckWhereUniqueInput[]
    connect?: LocationCheckWhereUniqueInput | LocationCheckWhereUniqueInput[]
    update?: LocationCheckUpdateWithWhereUniqueWithoutTravelPathReportInput | LocationCheckUpdateWithWhereUniqueWithoutTravelPathReportInput[]
    updateMany?: LocationCheckUpdateManyWithWhereWithoutTravelPathReportInput | LocationCheckUpdateManyWithWhereWithoutTravelPathReportInput[]
    deleteMany?: LocationCheckScalarWhereInput | LocationCheckScalarWhereInput[]
  }

  export type TravelPathReportCreateNestedOneWithoutLocationsInput = {
    create?: XOR<TravelPathReportCreateWithoutLocationsInput, TravelPathReportUncheckedCreateWithoutLocationsInput>
    connectOrCreate?: TravelPathReportCreateOrConnectWithoutLocationsInput
    connect?: TravelPathReportWhereUniqueInput
  }

  export type CheckItemCreateNestedManyWithoutLocationCheckInput = {
    create?: XOR<CheckItemCreateWithoutLocationCheckInput, CheckItemUncheckedCreateWithoutLocationCheckInput> | CheckItemCreateWithoutLocationCheckInput[] | CheckItemUncheckedCreateWithoutLocationCheckInput[]
    connectOrCreate?: CheckItemCreateOrConnectWithoutLocationCheckInput | CheckItemCreateOrConnectWithoutLocationCheckInput[]
    createMany?: CheckItemCreateManyLocationCheckInputEnvelope
    connect?: CheckItemWhereUniqueInput | CheckItemWhereUniqueInput[]
  }

  export type CheckItemUncheckedCreateNestedManyWithoutLocationCheckInput = {
    create?: XOR<CheckItemCreateWithoutLocationCheckInput, CheckItemUncheckedCreateWithoutLocationCheckInput> | CheckItemCreateWithoutLocationCheckInput[] | CheckItemUncheckedCreateWithoutLocationCheckInput[]
    connectOrCreate?: CheckItemCreateOrConnectWithoutLocationCheckInput | CheckItemCreateOrConnectWithoutLocationCheckInput[]
    createMany?: CheckItemCreateManyLocationCheckInputEnvelope
    connect?: CheckItemWhereUniqueInput | CheckItemWhereUniqueInput[]
  }

  export type TravelPathReportUpdateOneRequiredWithoutLocationsNestedInput = {
    create?: XOR<TravelPathReportCreateWithoutLocationsInput, TravelPathReportUncheckedCreateWithoutLocationsInput>
    connectOrCreate?: TravelPathReportCreateOrConnectWithoutLocationsInput
    upsert?: TravelPathReportUpsertWithoutLocationsInput
    connect?: TravelPathReportWhereUniqueInput
    update?: XOR<XOR<TravelPathReportUpdateToOneWithWhereWithoutLocationsInput, TravelPathReportUpdateWithoutLocationsInput>, TravelPathReportUncheckedUpdateWithoutLocationsInput>
  }

  export type CheckItemUpdateManyWithoutLocationCheckNestedInput = {
    create?: XOR<CheckItemCreateWithoutLocationCheckInput, CheckItemUncheckedCreateWithoutLocationCheckInput> | CheckItemCreateWithoutLocationCheckInput[] | CheckItemUncheckedCreateWithoutLocationCheckInput[]
    connectOrCreate?: CheckItemCreateOrConnectWithoutLocationCheckInput | CheckItemCreateOrConnectWithoutLocationCheckInput[]
    upsert?: CheckItemUpsertWithWhereUniqueWithoutLocationCheckInput | CheckItemUpsertWithWhereUniqueWithoutLocationCheckInput[]
    createMany?: CheckItemCreateManyLocationCheckInputEnvelope
    set?: CheckItemWhereUniqueInput | CheckItemWhereUniqueInput[]
    disconnect?: CheckItemWhereUniqueInput | CheckItemWhereUniqueInput[]
    delete?: CheckItemWhereUniqueInput | CheckItemWhereUniqueInput[]
    connect?: CheckItemWhereUniqueInput | CheckItemWhereUniqueInput[]
    update?: CheckItemUpdateWithWhereUniqueWithoutLocationCheckInput | CheckItemUpdateWithWhereUniqueWithoutLocationCheckInput[]
    updateMany?: CheckItemUpdateManyWithWhereWithoutLocationCheckInput | CheckItemUpdateManyWithWhereWithoutLocationCheckInput[]
    deleteMany?: CheckItemScalarWhereInput | CheckItemScalarWhereInput[]
  }

  export type CheckItemUncheckedUpdateManyWithoutLocationCheckNestedInput = {
    create?: XOR<CheckItemCreateWithoutLocationCheckInput, CheckItemUncheckedCreateWithoutLocationCheckInput> | CheckItemCreateWithoutLocationCheckInput[] | CheckItemUncheckedCreateWithoutLocationCheckInput[]
    connectOrCreate?: CheckItemCreateOrConnectWithoutLocationCheckInput | CheckItemCreateOrConnectWithoutLocationCheckInput[]
    upsert?: CheckItemUpsertWithWhereUniqueWithoutLocationCheckInput | CheckItemUpsertWithWhereUniqueWithoutLocationCheckInput[]
    createMany?: CheckItemCreateManyLocationCheckInputEnvelope
    set?: CheckItemWhereUniqueInput | CheckItemWhereUniqueInput[]
    disconnect?: CheckItemWhereUniqueInput | CheckItemWhereUniqueInput[]
    delete?: CheckItemWhereUniqueInput | CheckItemWhereUniqueInput[]
    connect?: CheckItemWhereUniqueInput | CheckItemWhereUniqueInput[]
    update?: CheckItemUpdateWithWhereUniqueWithoutLocationCheckInput | CheckItemUpdateWithWhereUniqueWithoutLocationCheckInput[]
    updateMany?: CheckItemUpdateManyWithWhereWithoutLocationCheckInput | CheckItemUpdateManyWithWhereWithoutLocationCheckInput[]
    deleteMany?: CheckItemScalarWhereInput | CheckItemScalarWhereInput[]
  }

  export type LocationCheckCreateNestedOneWithoutCheckItemsInput = {
    create?: XOR<LocationCheckCreateWithoutCheckItemsInput, LocationCheckUncheckedCreateWithoutCheckItemsInput>
    connectOrCreate?: LocationCheckCreateOrConnectWithoutCheckItemsInput
    connect?: LocationCheckWhereUniqueInput
  }

  export type LocationCheckUpdateOneRequiredWithoutCheckItemsNestedInput = {
    create?: XOR<LocationCheckCreateWithoutCheckItemsInput, LocationCheckUncheckedCreateWithoutCheckItemsInput>
    connectOrCreate?: LocationCheckCreateOrConnectWithoutCheckItemsInput
    upsert?: LocationCheckUpsertWithoutCheckItemsInput
    connect?: LocationCheckWhereUniqueInput
    update?: XOR<XOR<LocationCheckUpdateToOneWithWhereWithoutCheckItemsInput, LocationCheckUpdateWithoutCheckItemsInput>, LocationCheckUncheckedUpdateWithoutCheckItemsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumStoreFilter<$PrismaModel = never> = {
    equals?: $Enums.Store | EnumStoreFieldRefInput<$PrismaModel>
    in?: $Enums.Store[] | ListEnumStoreFieldRefInput<$PrismaModel>
    notIn?: $Enums.Store[] | ListEnumStoreFieldRefInput<$PrismaModel>
    not?: NestedEnumStoreFilter<$PrismaModel> | $Enums.Store
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumStoreWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Store | EnumStoreFieldRefInput<$PrismaModel>
    in?: $Enums.Store[] | ListEnumStoreFieldRefInput<$PrismaModel>
    notIn?: $Enums.Store[] | ListEnumStoreFieldRefInput<$PrismaModel>
    not?: NestedEnumStoreWithAggregatesFilter<$PrismaModel> | $Enums.Store
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStoreFilter<$PrismaModel>
    _max?: NestedEnumStoreFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type TravelPathReportCreateWithoutUserInput = {
    startTime: Date | string
    endTime: Date | string
    duration: string
    createdAt?: Date | string
    locations?: LocationCheckCreateNestedManyWithoutTravelPathReportInput
  }

  export type TravelPathReportUncheckedCreateWithoutUserInput = {
    id?: number
    startTime: Date | string
    endTime: Date | string
    duration: string
    createdAt?: Date | string
    locations?: LocationCheckUncheckedCreateNestedManyWithoutTravelPathReportInput
  }

  export type TravelPathReportCreateOrConnectWithoutUserInput = {
    where: TravelPathReportWhereUniqueInput
    create: XOR<TravelPathReportCreateWithoutUserInput, TravelPathReportUncheckedCreateWithoutUserInput>
  }

  export type TravelPathReportCreateManyUserInputEnvelope = {
    data: TravelPathReportCreateManyUserInput | TravelPathReportCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type TravelPathReportUpsertWithWhereUniqueWithoutUserInput = {
    where: TravelPathReportWhereUniqueInput
    update: XOR<TravelPathReportUpdateWithoutUserInput, TravelPathReportUncheckedUpdateWithoutUserInput>
    create: XOR<TravelPathReportCreateWithoutUserInput, TravelPathReportUncheckedCreateWithoutUserInput>
  }

  export type TravelPathReportUpdateWithWhereUniqueWithoutUserInput = {
    where: TravelPathReportWhereUniqueInput
    data: XOR<TravelPathReportUpdateWithoutUserInput, TravelPathReportUncheckedUpdateWithoutUserInput>
  }

  export type TravelPathReportUpdateManyWithWhereWithoutUserInput = {
    where: TravelPathReportScalarWhereInput
    data: XOR<TravelPathReportUpdateManyMutationInput, TravelPathReportUncheckedUpdateManyWithoutUserInput>
  }

  export type TravelPathReportScalarWhereInput = {
    AND?: TravelPathReportScalarWhereInput | TravelPathReportScalarWhereInput[]
    OR?: TravelPathReportScalarWhereInput[]
    NOT?: TravelPathReportScalarWhereInput | TravelPathReportScalarWhereInput[]
    id?: IntFilter<"TravelPathReport"> | number
    userId?: IntFilter<"TravelPathReport"> | number
    startTime?: DateTimeFilter<"TravelPathReport"> | Date | string
    endTime?: DateTimeFilter<"TravelPathReport"> | Date | string
    duration?: StringFilter<"TravelPathReport"> | string
    createdAt?: DateTimeFilter<"TravelPathReport"> | Date | string
  }

  export type UserCreateWithoutTravelPathReportsInput = {
    email: string
    name: string
    password: string
    store?: $Enums.Store
    isVerified?: boolean
    role?: $Enums.Role
    verificationToken?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUncheckedCreateWithoutTravelPathReportsInput = {
    id?: number
    email: string
    name: string
    password: string
    store?: $Enums.Store
    isVerified?: boolean
    role?: $Enums.Role
    verificationToken?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCreateOrConnectWithoutTravelPathReportsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTravelPathReportsInput, UserUncheckedCreateWithoutTravelPathReportsInput>
  }

  export type LocationCheckCreateWithoutTravelPathReportInput = {
    name: string
    checkItems?: CheckItemCreateNestedManyWithoutLocationCheckInput
  }

  export type LocationCheckUncheckedCreateWithoutTravelPathReportInput = {
    id?: number
    name: string
    checkItems?: CheckItemUncheckedCreateNestedManyWithoutLocationCheckInput
  }

  export type LocationCheckCreateOrConnectWithoutTravelPathReportInput = {
    where: LocationCheckWhereUniqueInput
    create: XOR<LocationCheckCreateWithoutTravelPathReportInput, LocationCheckUncheckedCreateWithoutTravelPathReportInput>
  }

  export type LocationCheckCreateManyTravelPathReportInputEnvelope = {
    data: LocationCheckCreateManyTravelPathReportInput | LocationCheckCreateManyTravelPathReportInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutTravelPathReportsInput = {
    update: XOR<UserUpdateWithoutTravelPathReportsInput, UserUncheckedUpdateWithoutTravelPathReportsInput>
    create: XOR<UserCreateWithoutTravelPathReportsInput, UserUncheckedCreateWithoutTravelPathReportsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTravelPathReportsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTravelPathReportsInput, UserUncheckedUpdateWithoutTravelPathReportsInput>
  }

  export type UserUpdateWithoutTravelPathReportsInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    store?: EnumStoreFieldUpdateOperationsInput | $Enums.Store
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateWithoutTravelPathReportsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    store?: EnumStoreFieldUpdateOperationsInput | $Enums.Store
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LocationCheckUpsertWithWhereUniqueWithoutTravelPathReportInput = {
    where: LocationCheckWhereUniqueInput
    update: XOR<LocationCheckUpdateWithoutTravelPathReportInput, LocationCheckUncheckedUpdateWithoutTravelPathReportInput>
    create: XOR<LocationCheckCreateWithoutTravelPathReportInput, LocationCheckUncheckedCreateWithoutTravelPathReportInput>
  }

  export type LocationCheckUpdateWithWhereUniqueWithoutTravelPathReportInput = {
    where: LocationCheckWhereUniqueInput
    data: XOR<LocationCheckUpdateWithoutTravelPathReportInput, LocationCheckUncheckedUpdateWithoutTravelPathReportInput>
  }

  export type LocationCheckUpdateManyWithWhereWithoutTravelPathReportInput = {
    where: LocationCheckScalarWhereInput
    data: XOR<LocationCheckUpdateManyMutationInput, LocationCheckUncheckedUpdateManyWithoutTravelPathReportInput>
  }

  export type LocationCheckScalarWhereInput = {
    AND?: LocationCheckScalarWhereInput | LocationCheckScalarWhereInput[]
    OR?: LocationCheckScalarWhereInput[]
    NOT?: LocationCheckScalarWhereInput | LocationCheckScalarWhereInput[]
    id?: IntFilter<"LocationCheck"> | number
    travelPathReportId?: IntFilter<"LocationCheck"> | number
    name?: StringFilter<"LocationCheck"> | string
  }

  export type TravelPathReportCreateWithoutLocationsInput = {
    startTime: Date | string
    endTime: Date | string
    duration: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutTravelPathReportsInput
  }

  export type TravelPathReportUncheckedCreateWithoutLocationsInput = {
    id?: number
    userId: number
    startTime: Date | string
    endTime: Date | string
    duration: string
    createdAt?: Date | string
  }

  export type TravelPathReportCreateOrConnectWithoutLocationsInput = {
    where: TravelPathReportWhereUniqueInput
    create: XOR<TravelPathReportCreateWithoutLocationsInput, TravelPathReportUncheckedCreateWithoutLocationsInput>
  }

  export type CheckItemCreateWithoutLocationCheckInput = {
    question: string
    result: boolean
    action?: string | null
  }

  export type CheckItemUncheckedCreateWithoutLocationCheckInput = {
    id?: number
    question: string
    result: boolean
    action?: string | null
  }

  export type CheckItemCreateOrConnectWithoutLocationCheckInput = {
    where: CheckItemWhereUniqueInput
    create: XOR<CheckItemCreateWithoutLocationCheckInput, CheckItemUncheckedCreateWithoutLocationCheckInput>
  }

  export type CheckItemCreateManyLocationCheckInputEnvelope = {
    data: CheckItemCreateManyLocationCheckInput | CheckItemCreateManyLocationCheckInput[]
    skipDuplicates?: boolean
  }

  export type TravelPathReportUpsertWithoutLocationsInput = {
    update: XOR<TravelPathReportUpdateWithoutLocationsInput, TravelPathReportUncheckedUpdateWithoutLocationsInput>
    create: XOR<TravelPathReportCreateWithoutLocationsInput, TravelPathReportUncheckedCreateWithoutLocationsInput>
    where?: TravelPathReportWhereInput
  }

  export type TravelPathReportUpdateToOneWithWhereWithoutLocationsInput = {
    where?: TravelPathReportWhereInput
    data: XOR<TravelPathReportUpdateWithoutLocationsInput, TravelPathReportUncheckedUpdateWithoutLocationsInput>
  }

  export type TravelPathReportUpdateWithoutLocationsInput = {
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutTravelPathReportsNestedInput
  }

  export type TravelPathReportUncheckedUpdateWithoutLocationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CheckItemUpsertWithWhereUniqueWithoutLocationCheckInput = {
    where: CheckItemWhereUniqueInput
    update: XOR<CheckItemUpdateWithoutLocationCheckInput, CheckItemUncheckedUpdateWithoutLocationCheckInput>
    create: XOR<CheckItemCreateWithoutLocationCheckInput, CheckItemUncheckedCreateWithoutLocationCheckInput>
  }

  export type CheckItemUpdateWithWhereUniqueWithoutLocationCheckInput = {
    where: CheckItemWhereUniqueInput
    data: XOR<CheckItemUpdateWithoutLocationCheckInput, CheckItemUncheckedUpdateWithoutLocationCheckInput>
  }

  export type CheckItemUpdateManyWithWhereWithoutLocationCheckInput = {
    where: CheckItemScalarWhereInput
    data: XOR<CheckItemUpdateManyMutationInput, CheckItemUncheckedUpdateManyWithoutLocationCheckInput>
  }

  export type CheckItemScalarWhereInput = {
    AND?: CheckItemScalarWhereInput | CheckItemScalarWhereInput[]
    OR?: CheckItemScalarWhereInput[]
    NOT?: CheckItemScalarWhereInput | CheckItemScalarWhereInput[]
    id?: IntFilter<"CheckItem"> | number
    locationCheckId?: IntFilter<"CheckItem"> | number
    question?: StringFilter<"CheckItem"> | string
    result?: BoolFilter<"CheckItem"> | boolean
    action?: StringNullableFilter<"CheckItem"> | string | null
  }

  export type LocationCheckCreateWithoutCheckItemsInput = {
    name: string
    travelPathReport: TravelPathReportCreateNestedOneWithoutLocationsInput
  }

  export type LocationCheckUncheckedCreateWithoutCheckItemsInput = {
    id?: number
    travelPathReportId: number
    name: string
  }

  export type LocationCheckCreateOrConnectWithoutCheckItemsInput = {
    where: LocationCheckWhereUniqueInput
    create: XOR<LocationCheckCreateWithoutCheckItemsInput, LocationCheckUncheckedCreateWithoutCheckItemsInput>
  }

  export type LocationCheckUpsertWithoutCheckItemsInput = {
    update: XOR<LocationCheckUpdateWithoutCheckItemsInput, LocationCheckUncheckedUpdateWithoutCheckItemsInput>
    create: XOR<LocationCheckCreateWithoutCheckItemsInput, LocationCheckUncheckedCreateWithoutCheckItemsInput>
    where?: LocationCheckWhereInput
  }

  export type LocationCheckUpdateToOneWithWhereWithoutCheckItemsInput = {
    where?: LocationCheckWhereInput
    data: XOR<LocationCheckUpdateWithoutCheckItemsInput, LocationCheckUncheckedUpdateWithoutCheckItemsInput>
  }

  export type LocationCheckUpdateWithoutCheckItemsInput = {
    name?: StringFieldUpdateOperationsInput | string
    travelPathReport?: TravelPathReportUpdateOneRequiredWithoutLocationsNestedInput
  }

  export type LocationCheckUncheckedUpdateWithoutCheckItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    travelPathReportId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type TravelPathReportCreateManyUserInput = {
    id?: number
    startTime: Date | string
    endTime: Date | string
    duration: string
    createdAt?: Date | string
  }

  export type TravelPathReportUpdateWithoutUserInput = {
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locations?: LocationCheckUpdateManyWithoutTravelPathReportNestedInput
  }

  export type TravelPathReportUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locations?: LocationCheckUncheckedUpdateManyWithoutTravelPathReportNestedInput
  }

  export type TravelPathReportUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LocationCheckCreateManyTravelPathReportInput = {
    id?: number
    name: string
  }

  export type LocationCheckUpdateWithoutTravelPathReportInput = {
    name?: StringFieldUpdateOperationsInput | string
    checkItems?: CheckItemUpdateManyWithoutLocationCheckNestedInput
  }

  export type LocationCheckUncheckedUpdateWithoutTravelPathReportInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    checkItems?: CheckItemUncheckedUpdateManyWithoutLocationCheckNestedInput
  }

  export type LocationCheckUncheckedUpdateManyWithoutTravelPathReportInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type CheckItemCreateManyLocationCheckInput = {
    id?: number
    question: string
    result: boolean
    action?: string | null
  }

  export type CheckItemUpdateWithoutLocationCheckInput = {
    question?: StringFieldUpdateOperationsInput | string
    result?: BoolFieldUpdateOperationsInput | boolean
    action?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CheckItemUncheckedUpdateWithoutLocationCheckInput = {
    id?: IntFieldUpdateOperationsInput | number
    question?: StringFieldUpdateOperationsInput | string
    result?: BoolFieldUpdateOperationsInput | boolean
    action?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CheckItemUncheckedUpdateManyWithoutLocationCheckInput = {
    id?: IntFieldUpdateOperationsInput | number
    question?: StringFieldUpdateOperationsInput | string
    result?: BoolFieldUpdateOperationsInput | boolean
    action?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}